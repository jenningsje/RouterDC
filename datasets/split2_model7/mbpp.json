[{"question": "\"\"\"\nWrite a python function to remove first and last occurrence of a given character from the string.\nassert remove_Occ(\"hello\",\"l\") == \"heo\"\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.4, "itpossible/Chinese-Mistral-7B-v0.1": 0.6, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.9, "meta-llama/Meta-Llama-3-8B": 0.9, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\nassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 1.0, "meta-math/MetaMath-Mistral-7B": 0.2, "itpossible/Chinese-Mistral-7B-v0.1": 0.6, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 1.0, "meta-llama/Meta-Llama-3-8B": 0.7, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a function to count the most common words in a dictionary.\nassert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a python function to find the volume of a triangular prism.\nassert find_Volume(10,8,6) == 240\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.3, "meta-math/MetaMath-Mistral-7B": 0.1, "itpossible/Chinese-Mistral-7B-v0.1": 0.1, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 1.0, "meta-llama/Meta-Llama-3-8B": 1.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a function to split a string at lowercase letters.\nassert split_lowerstring(\"AbCd\")==['bC','d']\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore.\nassert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a function to find the perimeter of a square.\nassert square_perimeter(10)==40\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 1.0, "meta-math/MetaMath-Mistral-7B": 1.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.9, "HuggingFaceH4/zephyr-7b-beta": 1.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 1.0, "meta-llama/Meta-Llama-3-8B": 0.8, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a function to remove characters from the first string which are present in the second string.\nassert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.8, "meta-math/MetaMath-Mistral-7B": 1.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.1, "HuggingFaceH4/zephyr-7b-beta": 0.8, "cognitivecomputations/dolphin-2.6-mistral-7b": 1.0, "meta-llama/Meta-Llama-3-8B": 0.9, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a function to find whether a given array of integers contains any duplicate element.\nassert test_duplicate(([1,2,3,4,5]))==False\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 1.0, "meta-math/MetaMath-Mistral-7B": 1.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.9, "HuggingFaceH4/zephyr-7b-beta": 1.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 1.0, "meta-llama/Meta-Llama-3-8B": 1.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a function to check if the given number is woodball or not.\nassert is_woodall(383) == True\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.1, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.3, "HuggingFaceH4/zephyr-7b-beta": 0.1, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.7, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.2}}, {"question": "\"\"\"\nWrite a function to find m number of multiples of n.\nassert multiples_of_num(4,3)== [3,6,9,12]\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.9, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a function to find the first duplicate element in a given array of integers.\nassert find_first_duplicate(([1, 2, 3, 4, 4, 5]))==4\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.5, "meta-math/MetaMath-Mistral-7B": 1.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.5, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.1, "meta-llama/Meta-Llama-3-8B": 0.1, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a python function to find the maximum sum of elements of list in a list of lists.\nassert maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 1.0, "meta-math/MetaMath-Mistral-7B": 0.9, "itpossible/Chinese-Mistral-7B-v0.1": 0.7, "HuggingFaceH4/zephyr-7b-beta": 1.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 1.0, "meta-llama/Meta-Llama-3-8B": 0.5, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a function to convert the given binary number to its decimal equivalent.\nassert binary_to_decimal(100) == 4\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a python function to find the product of non-repeated elements in a given array.\nassert find_Product([1,1,2,3],4) == 6\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.9, "meta-math/MetaMath-Mistral-7B": 0.7, "itpossible/Chinese-Mistral-7B-v0.1": 0.2, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 1.0, "meta-llama/Meta-Llama-3-8B": 0.4, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.5}}, {"question": "\"\"\"\nWrite a function to check if the given tuple list has all k elements.\nassert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a python function to remove all digits from a list of strings.\nassert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.8, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a python function to find binomial co-efficient.\nassert binomial_Coeff(5,2) == 10\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 1.0, "meta-math/MetaMath-Mistral-7B": 0.9, "itpossible/Chinese-Mistral-7B-v0.1": 0.9, "HuggingFaceH4/zephyr-7b-beta": 1.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.9, "meta-llama/Meta-Llama-3-8B": 1.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a python function to find the element occurring odd number of times.\nassert get_Odd_Occurrence([1,2,3,1,2,3,1],7) == 1\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.8, "meta-math/MetaMath-Mistral-7B": 0.6, "itpossible/Chinese-Mistral-7B-v0.1": 0.8, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.6, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a python function to count all the substrings starting and ending with same characters.\nassert count_Substring_With_Equal_Ends(\"abc\") == 3\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.9, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.8, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.3, "meta-llama/Meta-Llama-3-8B": 0.2, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.\nassert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a python function to find the largest prime factor of a given number.\nassert max_Prime_Factors(15) == 5\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.9, "meta-llama/Meta-Llama-3-8B": 0.2, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a python function to convert a decimal number to binary number.\nassert decimal_To_Binary(10) == 1010\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.2, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.2, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a python function to find the missing number in a sorted array.\nassert find_missing([1,2,3,5],4) == 4\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.8, "meta-math/MetaMath-Mistral-7B": 0.5, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.7, "meta-llama/Meta-Llama-3-8B": 1.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.9}}, {"question": "\"\"\"\nWrite a function to find the n-th rectangular number.\nassert find_rect_num(4) == 20\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a python function to find the nth digit in the proper fraction of two given numbers.\nassert find_Nth_Digit(1,2,1) == 5\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.1, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.1, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a function to sort a given mixed list of integers and strings.\nassert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.1, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a function to find the division of first even and odd number of a given list.\nassert div_even_odd([1,3,5,7,4,1,6,8])==4\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.2, "meta-math/MetaMath-Mistral-7B": 1.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.6, "HuggingFaceH4/zephyr-7b-beta": 0.7, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.8, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\nassert rearange_string(\"aab\")==('aba')\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a function to find frequency of the elements in a given list of lists using collections module.\nassert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.9, "meta-math/MetaMath-Mistral-7B": 1.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.5, "HuggingFaceH4/zephyr-7b-beta": 1.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 1.0, "meta-llama/Meta-Llama-3-8B": 1.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a function to filter even numbers using lambda function.\nassert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 1.0, "meta-math/MetaMath-Mistral-7B": 1.0, "itpossible/Chinese-Mistral-7B-v0.1": 1.0, "HuggingFaceH4/zephyr-7b-beta": 1.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 1.0, "meta-llama/Meta-Llama-3-8B": 0.8, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a python function to find the sum of repeated elements in a given array.\nassert find_Sum([1,2,3,1,1,4,5,6],8) == 3\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.2, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.3, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.1, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore using regex.\nassert text_match(\"aab_cbbbc\") == 'Found a match!'\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a function that matches a word at the beginning of a string.\nassert text_match_string(\" python\")==('Not matched!')\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a function to find the gcd of the given array elements.\nassert get_gcd([2, 4, 6, 8, 16]) == 2\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.1, "meta-math/MetaMath-Mistral-7B": 0.4, "itpossible/Chinese-Mistral-7B-v0.1": 0.1, "HuggingFaceH4/zephyr-7b-beta": 0.9, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.4, "meta-llama/Meta-Llama-3-8B": 0.8, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a python function to determine whether all the numbers are different from each other are not.\nassert test_distinct([1,5,7,9]) == True\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.5, "meta-math/MetaMath-Mistral-7B": 1.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.7, "HuggingFaceH4/zephyr-7b-beta": 0.1, "cognitivecomputations/dolphin-2.6-mistral-7b": 1.0, "meta-llama/Meta-Llama-3-8B": 0.9, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a python function to find the last digit when factorial of a divides factorial of b.\nassert compute_Last_Digit(2,4) == 2\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a python function to set all odd bits of a given number.\nassert odd_bit_set_number(10) == 15\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.1, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a function to extract every first or specified element from a given two-dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 1.0, "meta-math/MetaMath-Mistral-7B": 1.0, "itpossible/Chinese-Mistral-7B-v0.1": 1.0, "HuggingFaceH4/zephyr-7b-beta": 1.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 1.0, "meta-llama/Meta-Llama-3-8B": 1.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a function to find the list with minimum length using lambda function.\nassert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.1}}, {"question": "\"\"\"\nWrite a function to print check if the triangle is equilateral or not.\nassert check_equilateral(6,8,12)==False \n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.8, "meta-math/MetaMath-Mistral-7B": 1.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.8, "cognitivecomputations/dolphin-2.6-mistral-7b": 1.0, "meta-llama/Meta-Llama-3-8B": 1.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a function to caluclate area of a parallelogram.\nassert parallelogram_area(10,20)==200\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 1.0, "meta-math/MetaMath-Mistral-7B": 1.0, "itpossible/Chinese-Mistral-7B-v0.1": 1.0, "HuggingFaceH4/zephyr-7b-beta": 1.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 1.0, "meta-llama/Meta-Llama-3-8B": 1.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a python function to check whether the first and last characters of a given string are equal or not.\nassert check_Equality(\"abcda\") == \"Equal\"\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 1.0, "meta-math/MetaMath-Mistral-7B": 1.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.6, "HuggingFaceH4/zephyr-7b-beta": 1.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 1.0, "meta-llama/Meta-Llama-3-8B": 0.9, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a function to sort the given array by using counting sort.\nassert counting_sort([1,23,4,5,6,7,8]) == [1, 4, 5, 6, 7, 8, 23]\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 1.0, "meta-math/MetaMath-Mistral-7B": 1.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 1.0, "meta-llama/Meta-Llama-3-8B": 0.5, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a function to find t-nth term of geometric series.\nassert tn_gp(1,5,2)==16\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.2}}, {"question": "\"\"\"\nWrite a python function to check if a given number is one less than twice its reverse.\nassert check(70) == False\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.1, "meta-math/MetaMath-Mistral-7B": 0.6, "itpossible/Chinese-Mistral-7B-v0.1": 0.6, "HuggingFaceH4/zephyr-7b-beta": 1.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 1.0, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a python function to find the largest number that can be formed with the given digits.\nassert find_Max_Num([1,2,3],3) == 321\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.5, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.9, "meta-llama/Meta-Llama-3-8B": 0.7, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a python function to check whether the given two integers have opposite sign or not.\nassert opposite_Signs(1,-2) == True\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 1.0, "meta-math/MetaMath-Mistral-7B": 1.0, "itpossible/Chinese-Mistral-7B-v0.1": 1.0, "HuggingFaceH4/zephyr-7b-beta": 1.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 1.0, "meta-llama/Meta-Llama-3-8B": 0.8, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a function to find the nth octagonal number.\nassert is_octagonal(5) == 65\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.\nassert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a python function to count number of substrings with the sum of digits equal to their length.\nassert count_Substrings('112112',6) == 6\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.4, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.6, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.8, "meta-llama/Meta-Llama-3-8B": 0.5, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a python function to find smallest number in a list.\nassert smallest_num([10, 20, 1, 45, 99]) == 1\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 1.0, "meta-math/MetaMath-Mistral-7B": 1.0, "itpossible/Chinese-Mistral-7B-v0.1": 1.0, "HuggingFaceH4/zephyr-7b-beta": 1.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 1.0, "meta-llama/Meta-Llama-3-8B": 1.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a function to find the maximum difference between available pairs in the given tuple list.\nassert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.1, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a function to sort a list of tuples using lambda.\nassert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.8, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.3, "HuggingFaceH4/zephyr-7b-beta": 1.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 1.0, "meta-llama/Meta-Llama-3-8B": 1.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a function of recursion list sum.\nassert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.8, "meta-math/MetaMath-Mistral-7B": 0.8, "itpossible/Chinese-Mistral-7B-v0.1": 0.5, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 1.0, "meta-llama/Meta-Llama-3-8B": 0.3, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a python function to count positive numbers in a list.\nassert pos_count([1,-2,3,-4]) == 2\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 1.0, "meta-math/MetaMath-Mistral-7B": 1.0, "itpossible/Chinese-Mistral-7B-v0.1": 1.0, "HuggingFaceH4/zephyr-7b-beta": 1.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 1.0, "meta-llama/Meta-Llama-3-8B": 1.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a function to find the number of ways to partition a set of bell numbers.\nassert bell_number(2)==2\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a python function to check whether the given array is monotonic or not.\nassert is_Monotonic([6, 5, 4, 4]) == True\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 1.0, "meta-llama/Meta-Llama-3-8B": 0.2, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a function to check whether a list contains the given sublist or not.\nassert is_sublist([2,4,3,5,7],[3,7])==False\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.1, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.4, "meta-llama/Meta-Llama-3-8B": 0.1, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.9}}, {"question": "\"\"\"\nWrite a function to find whether all the given tuples have equal length or not.\nassert get_equal([(11, 22, 33), (44, 55, 66)], 3) == 'All tuples have same length'\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.6, "meta-math/MetaMath-Mistral-7B": 0.3, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.1, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.7, "meta-llama/Meta-Llama-3-8B": 0.4, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a function to sort a list of elements using comb sort.\nassert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 1.0, "meta-math/MetaMath-Mistral-7B": 1.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.1, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 1.0, "meta-llama/Meta-Llama-3-8B": 1.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.6}}, {"question": "\"\"\"\nWrite a python function to check whether the given number can be represented as difference of two squares or not.\nassert dif_Square(5) == True\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.9, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.5, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.4, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.2}}, {"question": "\"\"\"\nWrite a function to split the given string with multiple delimiters by using regex.\nassert multiple_split('Forces of the \\ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a function to check whether it follows the sequence given in the patterns array.\nassert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True \n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\nassert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.4, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.2, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a python function to find the difference between sum of even and odd digits.\nassert is_Diff (12345) == False\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a python function to find number of integers with odd number of set bits.\nassert count_With_Odd_SetBits(5) == 3\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.6, "meta-math/MetaMath-Mistral-7B": 1.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.7, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 1.0, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a python function to check whether the length of the word is odd or not.\nassert word_len(\"Hadoop\") == False\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.1, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.4, "HuggingFaceH4/zephyr-7b-beta": 1.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.3}}, {"question": "\"\"\"\nWrite a function to find the nth tetrahedral number.\nassert tetrahedral_number(5) == 35.0\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.5, "meta-math/MetaMath-Mistral-7B": 1.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 1.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.5, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a function to zip the two given tuples.\nassert zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6) ) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.1, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a function to find the volume of a sphere.\nassert volume_sphere(10)==4188.790204786391\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 1.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.6, "HuggingFaceH4/zephyr-7b-beta": 0.8, "cognitivecomputations/dolphin-2.6-mistral-7b": 1.0, "meta-llama/Meta-Llama-3-8B": 1.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a python function to find the character made by adding all the characters of the given string.\nassert get_Char(\"abc\") == \"f\"\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a function to find the n-th number in newman conway sequence.\nassert sequence(10) == 6\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a function to find the surface area of a sphere.\nassert surfacearea_sphere(10)==1256.6370614359173\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.4, "itpossible/Chinese-Mistral-7B-v0.1": 0.2, "HuggingFaceH4/zephyr-7b-beta": 1.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 1.0, "meta-llama/Meta-Llama-3-8B": 1.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.5}}, {"question": "\"\"\"\nWrite a function to find nth centered hexagonal number.\nassert centered_hexagonal_number(10) == 271\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a function to merge three dictionaries into a single expression.\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.1, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a function to get the frequency of the elements in a list.\nassert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1}) \n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 1.0, "meta-math/MetaMath-Mistral-7B": 1.0, "itpossible/Chinese-Mistral-7B-v0.1": 1.0, "HuggingFaceH4/zephyr-7b-beta": 0.9, "cognitivecomputations/dolphin-2.6-mistral-7b": 1.0, "meta-llama/Meta-Llama-3-8B": 1.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a function to find the closest smaller number than n.\nassert closest_num(11) == 10\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.7, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.6, "HuggingFaceH4/zephyr-7b-beta": 0.3, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.4, "meta-llama/Meta-Llama-3-8B": 0.6, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a python function to find the length of the longest word.\nassert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 1.0, "meta-math/MetaMath-Mistral-7B": 1.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.9, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.9, "meta-llama/Meta-Llama-3-8B": 0.9, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a function to check if a substring is present in a given list of string values.\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 1.0, "meta-math/MetaMath-Mistral-7B": 1.0, "itpossible/Chinese-Mistral-7B-v0.1": 1.0, "HuggingFaceH4/zephyr-7b-beta": 1.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 1.0, "meta-llama/Meta-Llama-3-8B": 1.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a function to check whether the given number is undulating or not.\nassert is_undulating(\"1212121\") == True\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.2, "meta-math/MetaMath-Mistral-7B": 0.4, "itpossible/Chinese-Mistral-7B-v0.1": 0.4, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 1.0, "meta-llama/Meta-Llama-3-8B": 0.2, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.3}}, {"question": "\"\"\"\nWrite a function to calculate the value of 'a' to the power 'b'.\nassert power(3,4) == 81\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 1.0, "meta-math/MetaMath-Mistral-7B": 1.0, "itpossible/Chinese-Mistral-7B-v0.1": 1.0, "HuggingFaceH4/zephyr-7b-beta": 1.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 1.0, "meta-llama/Meta-Llama-3-8B": 0.9, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a function to extract the index minimum value record from the given tuples.\nassert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.9, "meta-math/MetaMath-Mistral-7B": 1.0, "itpossible/Chinese-Mistral-7B-v0.1": 1.0, "HuggingFaceH4/zephyr-7b-beta": 1.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 1.0, "meta-llama/Meta-Llama-3-8B": 0.9, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a python function to find the minimum length of sublist.\nassert Find_Min_Length([[1],[1,2]]) == 1\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.9, "meta-math/MetaMath-Mistral-7B": 1.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.1, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.8, "meta-llama/Meta-Llama-3-8B": 0.9, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a python function to find the number of divisors of a given integer.\nassert divisor(15) == 4 \n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 1.0, "meta-math/MetaMath-Mistral-7B": 1.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.8, "HuggingFaceH4/zephyr-7b-beta": 1.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 1.0, "meta-llama/Meta-Llama-3-8B": 1.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a function to find frequency count of list of lists.\nassert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.9, "meta-math/MetaMath-Mistral-7B": 1.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.9, "HuggingFaceH4/zephyr-7b-beta": 1.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 1.0, "meta-llama/Meta-Llama-3-8B": 1.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a function to multiply all the numbers in a list and divide with the length of the list.\nassert multiply_num((8, 2, 3, -1, 7))==-67.2\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 1.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 1.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 1.0, "meta-llama/Meta-Llama-3-8B": 0.6, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a function to convert the given decimal number to its binary equivalent.\nassert decimal_to_binary(8) == '1000'\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.6, "meta-math/MetaMath-Mistral-7B": 1.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.6, "HuggingFaceH4/zephyr-7b-beta": 1.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 1.0, "meta-llama/Meta-Llama-3-8B": 0.7, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a function to find the next smallest palindrome of a specified number.\nassert next_smallest_palindrome(99)==101\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.1, "meta-math/MetaMath-Mistral-7B": 0.1, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.3, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.8}}, {"question": "\"\"\"\nWrite a function to find the kth element in the given array.\nassert kth_element([12,3,5,7,19], 5, 2) == 3\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a function to convert snake case string to camel case string.\nassert snake_to_camel('python_program')=='PythonProgram'\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.4, "meta-math/MetaMath-Mistral-7B": 0.9, "itpossible/Chinese-Mistral-7B-v0.1": 0.3, "HuggingFaceH4/zephyr-7b-beta": 0.1, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.1, "meta-llama/Meta-Llama-3-8B": 0.8, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a function to find eulerian number a(n, m).\nassert eulerian_num(3, 1) == 4\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a function to sort each sublist of strings in a given list of lists using lambda function.\nassert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.3, "meta-math/MetaMath-Mistral-7B": 0.8, "itpossible/Chinese-Mistral-7B-v0.1": 0.8, "HuggingFaceH4/zephyr-7b-beta": 1.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 1.0, "meta-llama/Meta-Llama-3-8B": 1.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a python function to count true booleans in the given list.\nassert count([True,False,True]) == 2\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.7, "meta-math/MetaMath-Mistral-7B": 1.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.6, "HuggingFaceH4/zephyr-7b-beta": 0.3, "cognitivecomputations/dolphin-2.6-mistral-7b": 1.0, "meta-llama/Meta-Llama-3-8B": 1.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a function to add the given list to the given tuples.\nassert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.6, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.6, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a python function to count hexadecimal numbers for a given range.\nassert count_Hexadecimal(10,15) == 6\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.3, "meta-math/MetaMath-Mistral-7B": 1.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.4, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.\nassert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.8, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.9, "meta-llama/Meta-Llama-3-8B": 0.7, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a python function to find the count of rotations of a binary string with odd value.\nassert odd_Equivalent(\"011001\",6) == 3\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.3, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.4, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.2}}, {"question": "\"\"\"\nWrite a function to extract the ranges that are missing from the given list with the given start range and end range values.\nassert extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100) == [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a function to find common elements in given nested lists. * list item * list item * list item * list item\nassert common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])==[18, 12]\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.3, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.2, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a python function to find the perimeter of a cylinder.\nassert perimeter(2,4) == 12\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.4, "meta-math/MetaMath-Mistral-7B": 1.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.9, "meta-llama/Meta-Llama-3-8B": 0.1, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a function to check if a string represents an integer or not.\nassert check_integer(\"python\")==False\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 1.0, "meta-math/MetaMath-Mistral-7B": 1.0, "itpossible/Chinese-Mistral-7B-v0.1": 1.0, "HuggingFaceH4/zephyr-7b-beta": 1.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 1.0, "meta-llama/Meta-Llama-3-8B": 1.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a function to assign frequency to each tuple in the given tuple list.\nassert assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)] ) == '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a function to check whether all dictionaries in a list are empty or not.\nassert empty_dit([{},{},{}])==True\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.3, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 1.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a function to convert a given tuple of positive integers into an integer.\nassert tuple_to_int((1,2,3))==123\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 1.0, "meta-math/MetaMath-Mistral-7B": 0.9, "itpossible/Chinese-Mistral-7B-v0.1": 0.5, "HuggingFaceH4/zephyr-7b-beta": 1.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 1.0, "meta-llama/Meta-Llama-3-8B": 1.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a function to convert all possible convertible elements in the list to float.\nassert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == '[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]'\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\n[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\nassert string_to_list(\"python programming\")==['python','programming']\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 1.0, "meta-math/MetaMath-Mistral-7B": 1.0, "itpossible/Chinese-Mistral-7B-v0.1": 1.0, "HuggingFaceH4/zephyr-7b-beta": 0.9, "cognitivecomputations/dolphin-2.6-mistral-7b": 1.0, "meta-llama/Meta-Llama-3-8B": 1.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a python function to find the element that appears only once in a sorted array.\nassert search([1,1,2,2,3],5) == 3\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.1, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.2, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a function to find the maximum product from the pairs of tuples within a given list.\nassert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.4, "meta-llama/Meta-Llama-3-8B": 0.1, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a function to find the triplet with sum of the given array\nassert check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0) == True\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.1, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a function to find n\u2019th smart number.\nassert smartNumber(1) == 30\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a function to sum all amicable numbers from 1 to a specified number.\nassert amicable_numbers_sum(999)==504\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a function to get the angle of a complex number.\nassert angle_complex(0,1j)==1.5707963267948966 \n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nassert find_length(\"11000010001\", 11) == 6\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a python function to find the sum of common divisors of two given numbers.\nassert sum(10,15) == 6\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.2, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a function to multiply two integers without using the * operator in python.\nassert multiply_int(10,20)==200\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.3, "meta-math/MetaMath-Mistral-7B": 0.9, "itpossible/Chinese-Mistral-7B-v0.1": 0.7, "HuggingFaceH4/zephyr-7b-beta": 1.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 1.0, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a function to shortlist words that are longer than n from a given list of words.\nassert long_words(3,\"python is a programming language\")==['python','programming','language']\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 1.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.8, "HuggingFaceH4/zephyr-7b-beta": 1.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 1.0, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a function to calculate magic square.\nassert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.2, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.9, "meta-llama/Meta-Llama-3-8B": 0.3, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.8}}, {"question": "\"\"\"\nWrite a function to find the item with maximum frequency in a given list.\nassert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==(2, 5)\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 1.0, "meta-math/MetaMath-Mistral-7B": 1.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.3, "HuggingFaceH4/zephyr-7b-beta": 0.3, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.3, "meta-llama/Meta-Llama-3-8B": 0.9, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a python function to reverse only the vowels of a given string.\nassert reverse_vowels(\"Python\") == \"Python\"\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.1, "meta-math/MetaMath-Mistral-7B": 0.2, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 1.0, "meta-llama/Meta-Llama-3-8B": 0.7, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a function to convert tuple to a string.\nassert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 1.0, "meta-math/MetaMath-Mistral-7B": 1.0, "itpossible/Chinese-Mistral-7B-v0.1": 1.0, "HuggingFaceH4/zephyr-7b-beta": 1.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 1.0, "meta-llama/Meta-Llama-3-8B": 1.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\nassert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 1.0, "meta-math/MetaMath-Mistral-7B": 0.1, "itpossible/Chinese-Mistral-7B-v0.1": 0.7, "HuggingFaceH4/zephyr-7b-beta": 1.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 1.0, "meta-llama/Meta-Llama-3-8B": 0.9, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a python function to check whether the last element of given array is even or odd after performing an operation p times.\nassert check_last([5,7,10],3,1) == \"ODD\"\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.1, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a function to find the nth hexagonal number.\nassert hexagonal_num(10) == 190\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.6, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 1.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 1.0, "meta-llama/Meta-Llama-3-8B": 0.5, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.6}}, {"question": "\"\"\"\nWrite a function to calculate electricity bill.\nassert cal_electbill(75)==246.25\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a function to find the ration of zeroes in an array of integers.\nassert zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.15\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nassert is_Sum_Of_Powers_Of_Two(10) == True\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.1, "itpossible/Chinese-Mistral-7B-v0.1": 0.1, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.1, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a function to find the circumference of a circle.\nassert circle_circumference(10)==62.830000000000005\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a function to extract elements that occur singly in the given tuple list.\nassert extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]) == [3, 4, 5, 7, 1]\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.8, "meta-math/MetaMath-Mistral-7B": 0.8, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 1.0, "meta-llama/Meta-Llama-3-8B": 0.3, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a function to sort a list of elements using pancake sort.\nassert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a function to count the same pair in three given lists.\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.5, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a function to find number of lists present in the given tuple.\nassert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a python function to find the sum of absolute differences in all pairs of the given array.\nassert sum_Pairs([1,8,9,15,16],5) == 74\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.6, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.9, "meta-llama/Meta-Llama-3-8B": 0.2, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a python function to find the maximum difference between any two elements in a given array.\nassert max_Abs_Diff((2,1,5,3),4) == 4\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 1.0, "meta-math/MetaMath-Mistral-7B": 0.3, "itpossible/Chinese-Mistral-7B-v0.1": 0.9, "HuggingFaceH4/zephyr-7b-beta": 0.2, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.8, "meta-llama/Meta-Llama-3-8B": 0.4, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a function to find the ascii value of total characters in a string.\nassert ascii_value_string(\"python\")==112\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a function to find the maximum total path sum in the given triangle.\nassert max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2) == 14\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a function to divide a number into two parts such that the sum of digits is maximum.\nassert sum_digits_twoparts(35)==17\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a function to find the longest subsequence such that the difference between adjacents is one for the given array.\nassert longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7) == 6\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.6, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.2, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 1.0, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a python function to find whether the given number is present in the infinite sequence or not.\nassert does_Contain_B(1,7,3) == True\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.1, "meta-math/MetaMath-Mistral-7B": 0.2, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.2, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a python function to check whether the given number is co-prime or not.\nassert is_coprime(17,13) == True\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.9, "meta-math/MetaMath-Mistral-7B": 1.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.3, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.3, "meta-llama/Meta-Llama-3-8B": 0.9, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.4}}, {"question": "\"\"\"\nWrite a function to sort the given array by using merge sort.\nassert merge_sort([3, 4, 2, 6, 5, 7, 1, 9]) == [1, 2, 3, 4, 5, 6, 7, 9]\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 1.0, "meta-math/MetaMath-Mistral-7B": 1.0, "itpossible/Chinese-Mistral-7B-v0.1": 1.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 1.0, "meta-llama/Meta-Llama-3-8B": 1.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a function to find the vertex of a parabola.\nassert parabola_vertex(5,3,2)==(-0.3, 1.55)\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 1.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.1, "HuggingFaceH4/zephyr-7b-beta": 0.9, "cognitivecomputations/dolphin-2.6-mistral-7b": 1.0, "meta-llama/Meta-Llama-3-8B": 0.3, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.7}}, {"question": "\"\"\"\nWrite a function to extract every specified element from a given two dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 1.0, "meta-math/MetaMath-Mistral-7B": 1.0, "itpossible/Chinese-Mistral-7B-v0.1": 1.0, "HuggingFaceH4/zephyr-7b-beta": 1.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 1.0, "meta-llama/Meta-Llama-3-8B": 1.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a python function to toggle all even bits of a given number.\nassert even_bit_toggle_number(10) == 0\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a function to convert a tuple of string values to a tuple of integer values.\nassert tuple_int_str((('333', '33'), ('1416', '55')))==((333, 33), (1416, 55))\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.4, "meta-math/MetaMath-Mistral-7B": 0.4, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.9, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.7}}, {"question": "\"\"\"\nWrite a function to reflect the run-length encoding from a list.\nassert encode_list([1,1,2,3,4,4.3,5,1])==[[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.4, "meta-llama/Meta-Llama-3-8B": 0.3, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a python function to find k number of operations required to make all elements equal.\nassert min_Ops([2,2,2,2],4,3) == 0\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a function to print the season for the given month and day.\nassert month_season('January',4)==('winter')\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a function to find x and y that satisfies ax + by = n.\nassert solution(2, 3, 7) == ('x = ', 2, ', y = ', 1)\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a function to remove all elements from a given list present in another list.\nassert remove_elements([1,2,3,4,5,6,7,8,9,10],[2,4,6,8])==[1, 3, 5, 7, 9, 10]\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 1.0, "meta-math/MetaMath-Mistral-7B": 1.0, "itpossible/Chinese-Mistral-7B-v0.1": 1.0, "HuggingFaceH4/zephyr-7b-beta": 1.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 1.0, "meta-llama/Meta-Llama-3-8B": 0.9, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\nassert sum_series(6)==12\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.1, "meta-math/MetaMath-Mistral-7B": 0.5, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.8, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a function to calculate the area of a regular polygon.\nassert area_polygon(4,20)==400.00000000000006\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.5, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.7, "meta-llama/Meta-Llama-3-8B": 1.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a python function to check whether the sum of divisors are same or not.\nassert areEquivalent(36,57) == False\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.9, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.6, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.2, "meta-llama/Meta-Llama-3-8B": 0.8, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.1}}, {"question": "\"\"\"\nWrite a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\nassert count_char_position(\"xbcefg\") == 2\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.2, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.4}}, {"question": "\"\"\"\nWrite a python function to count the pairs with xor as an even number.\nassert find_even_Pair([5,4,7,2,1],5) == 4\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 1.0, "meta-math/MetaMath-Mistral-7B": 1.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 1.0, "meta-llama/Meta-Llama-3-8B": 1.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a python function to find smallest power of 2 greater than or equal to n.\nassert next_Power_Of_2(0) == 1\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.6, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.4, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a python function to find the frequency of a number in a given array.\nassert frequency([1,2,3],4) == 0\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 1.0, "meta-math/MetaMath-Mistral-7B": 1.0, "itpossible/Chinese-Mistral-7B-v0.1": 1.0, "HuggingFaceH4/zephyr-7b-beta": 1.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 1.0, "meta-llama/Meta-Llama-3-8B": 1.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a function to calculate the nth pell number.\nassert get_pell(4) == 12\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.1, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.1, "meta-llama/Meta-Llama-3-8B": 0.6, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a function to find sum of the numbers in a list between the indices of a specified range.\nassert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],8,10)==29\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.6, "meta-math/MetaMath-Mistral-7B": 1.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.1, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.9, "meta-llama/Meta-Llama-3-8B": 1.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a function to find the perimeter of a pentagon.\nassert perimeter_pentagon(5)==25\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 1.0, "meta-math/MetaMath-Mistral-7B": 1.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.6, "HuggingFaceH4/zephyr-7b-beta": 0.2, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.5, "meta-llama/Meta-Llama-3-8B": 0.7, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.3}}, {"question": "\"\"\"\nWrite a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\nassert count_occurance(\"letstdlenstdporstd\") == 3\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.6, "meta-math/MetaMath-Mistral-7B": 0.6, "itpossible/Chinese-Mistral-7B-v0.1": 0.7, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 1.0, "meta-llama/Meta-Llama-3-8B": 1.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a function to remove everything except alphanumeric characters from a string.\nassert remove_splchar('python  @#&^%$*program123')==('pythonprogram123')\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.9, "meta-math/MetaMath-Mistral-7B": 1.0, "itpossible/Chinese-Mistral-7B-v0.1": 1.0, "HuggingFaceH4/zephyr-7b-beta": 1.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 1.0, "meta-llama/Meta-Llama-3-8B": 1.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a function to group a sequence of key-value pairs into a dictionary of lists.\nassert group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])=={'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.9, "meta-math/MetaMath-Mistral-7B": 1.0, "itpossible/Chinese-Mistral-7B-v0.1": 1.0, "HuggingFaceH4/zephyr-7b-beta": 1.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 1.0, "meta-llama/Meta-Llama-3-8B": 0.6, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a function to verify validity of a string of parentheses.\nassert is_valid_parenthese(\"(){}[]\")==True\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.8, "meta-math/MetaMath-Mistral-7B": 0.9, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 1.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 1.0, "meta-llama/Meta-Llama-3-8B": 0.8, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a function to find the perimeter of a triangle.\nassert perimeter_triangle(10,20,30)==60\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 1.0, "meta-math/MetaMath-Mistral-7B": 1.0, "itpossible/Chinese-Mistral-7B-v0.1": 1.0, "HuggingFaceH4/zephyr-7b-beta": 1.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 1.0, "meta-llama/Meta-Llama-3-8B": 0.6, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a python function to find two distinct numbers such that their lcm lies within the given range.\nassert answer(3,8) == (3,6)\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a function to search some literals strings in a string.\nassert string_literals(['language'],'python language')==('Matched!')\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.8, "meta-math/MetaMath-Mistral-7B": 1.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.8, "meta-llama/Meta-Llama-3-8B": 0.8, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.4}}, {"question": "\"\"\"\nWrite a function to find if the given number is a keith number or not.\nassert is_num_keith(14) == True\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a function to calculate distance between two points using latitude and longitude.\nassert distance_lat_long(23.5,67.5,25.5,69.5)==12179.372041317429\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a function to find the longest common prefix in the given set of strings.\nassert common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 4) == 'ta'\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.1, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a function to find uppercase, lowercase, special character and numeric values using regex.\nassert find_character(\"ThisIsGeeksforGeeks\") == (['T', 'I', 'G', 'G'], ['h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'e', 'k', 's'], [], [])\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a function to count all the distinct pairs having a difference of k in any array.\nassert count_pairs([1, 5, 3, 4, 2], 5, 3) == 2\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.1, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a function to find all the values in a list that are greater than a specified number.\nassert greater_specificnum([220, 330, 500],200)==True\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.3, "HuggingFaceH4/zephyr-7b-beta": 0.1, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.7, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a function to find the focus of a parabola.\nassert parabola_focus(5,3,2)==(-0.3, 1.6)\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a function to search some literals strings in a string by using regex.\nassert check_literals('The quick brown fox jumps over the lazy dog.',['fox']) == 'Matched!'\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.8, "meta-math/MetaMath-Mistral-7B": 0.3, "itpossible/Chinese-Mistral-7B-v0.1": 0.5, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.3, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a function to find the longest common subsequence for the given two sequences.\nassert longest_common_subsequence(\"AGGTAB\" , \"GXTXAYB\", 6, 7) == 4\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 1.0, "meta-math/MetaMath-Mistral-7B": 1.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.8, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 1.0, "meta-llama/Meta-Llama-3-8B": 0.9, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a python function to check whether the given number can be represented by product of two squares or not.\nassert prod_Square(25) == False\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.1, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.3, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.3}}, {"question": "\"\"\"\nWrite a python function to find the first missing positive number.\nassert first_Missing_Positive([1,2,3,-1,5],5) == 4\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.6, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.5}}, {"question": "\"\"\"\nWrite a python function to count the number of integral co-ordinates that lie inside a square.\nassert count_Intgral_Points(1,1,4,4) == 4\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a function to check whether the given month name contains 30 days or not.\nassert check_monthnumber(\"February\")==False\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.9, "meta-math/MetaMath-Mistral-7B": 0.8, "itpossible/Chinese-Mistral-7B-v0.1": 0.2, "HuggingFaceH4/zephyr-7b-beta": 0.2, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.1, "meta-llama/Meta-Llama-3-8B": 0.8, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.5}}, {"question": "\"\"\"\nWrite a python function to check whether a string has atleast one letter and one number.\nassert check_String('thishasboth29') == True\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.5, "meta-math/MetaMath-Mistral-7B": 0.5, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.3, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.8, "meta-llama/Meta-Llama-3-8B": 0.6, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a function to remove the duplicates from the given tuple.\nassert remove_tuple((1, 3, 5, 2, 3, 5, 1, 1, 3)) == (1, 2, 3, 5)\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.7, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.9, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.2, "meta-llama/Meta-Llama-3-8B": 0.8, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a python function to convert octal number to decimal number.\nassert octal_To_Decimal(25) == 21\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 1.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.9, "meta-llama/Meta-Llama-3-8B": 0.9, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a python function to find the first position of an element in a sorted array.\nassert first([1,2,3,4,5,6,6],6,6) == 5\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.4, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 1.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.2, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.6}}, {"question": "\"\"\"\nWrite a function to remove all the tuples with length k.\nassert remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] , 1) == [(4, 5), (8, 6, 7), (3, 4, 6, 7)]\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 1.0, "meta-math/MetaMath-Mistral-7B": 1.0, "itpossible/Chinese-Mistral-7B-v0.1": 1.0, "HuggingFaceH4/zephyr-7b-beta": 1.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 1.0, "meta-llama/Meta-Llama-3-8B": 1.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a function to perform the exponentiation of the given two tuples.\nassert find_exponentio((10, 4, 5, 6), (5, 6, 7, 5)) == (100000, 4096, 78125, 7776)\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 1.0, "meta-math/MetaMath-Mistral-7B": 1.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.6, "HuggingFaceH4/zephyr-7b-beta": 0.1, "cognitivecomputations/dolphin-2.6-mistral-7b": 1.0, "meta-llama/Meta-Llama-3-8B": 1.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.2}}, {"question": "\"\"\"\nWrite a function to find the largest triangle that can be inscribed in an ellipse.\nassert largest_triangle(4,2)==10.392304845413264\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a python function to find highest power of 2 less than or equal to given number.\nassert highest_Power_of_2(10) == 8\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.1, "HuggingFaceH4/zephyr-7b-beta": 1.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.8, "meta-llama/Meta-Llama-3-8B": 0.8, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a function to find all index positions of the maximum values in a given list.\nassert position_max([12,33,23,10,67,89,45,667,23,12,11,10,54])==[7]\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.8, "meta-math/MetaMath-Mistral-7B": 0.6, "itpossible/Chinese-Mistral-7B-v0.1": 0.1, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 1.0, "meta-llama/Meta-Llama-3-8B": 0.3, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a python function to check whether the elements in a list are same or not.\nassert chkList(['one','one','one']) == True\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.4, "meta-math/MetaMath-Mistral-7B": 1.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.9, "HuggingFaceH4/zephyr-7b-beta": 0.4, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.4, "meta-llama/Meta-Llama-3-8B": 0.7, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a function to remove even characters in a string.\nassert remove_even(\"python\")==(\"pto\")\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.1, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.8, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a python function to find the hamming distance between given two integers.\nassert hamming_Distance(4,8) == 2\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.6, "meta-math/MetaMath-Mistral-7B": 0.4, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 1.0, "meta-llama/Meta-Llama-3-8B": 0.8, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a python function to count the occurrence of a given character in a string.\nassert count(\"abcc\",\"c\") == 2\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 1.0, "meta-math/MetaMath-Mistral-7B": 1.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.8, "HuggingFaceH4/zephyr-7b-beta": 1.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 1.0, "meta-llama/Meta-Llama-3-8B": 0.2, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a function to find the inversions of tuple elements in the given tuple list.\nassert inversion_elements((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a function to perform the adjacent element concatenation in the given tuples.\nassert concatenate_elements((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\")) == ('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS')\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.2, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.1, "meta-llama/Meta-Llama-3-8B": 0.1, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a function to count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions.\nassert find_longest_repeating_subseq(\"AABEBCDD\") == 3\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.1, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a function to check the given decimal with a precision of 2 by using regex.\nassert is_decimal('123.11') == True\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.7, "meta-math/MetaMath-Mistral-7B": 1.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.2, "HuggingFaceH4/zephyr-7b-beta": 1.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 1.0, "meta-llama/Meta-Llama-3-8B": 1.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a function to delete the smallest element from the given heap and then insert a new item.\nassert heap_replace( [25, 44, 68, 21, 39, 23, 89],21)==[21, 25, 23, 44, 39, 68, 89]\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.1, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\nassert is_allowed_specific_char(\"ABCDEFabcdef123450\") == True\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.6, "meta-math/MetaMath-Mistral-7B": 0.2, "itpossible/Chinese-Mistral-7B-v0.1": 0.9, "HuggingFaceH4/zephyr-7b-beta": 1.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 1.0, "meta-llama/Meta-Llama-3-8B": 1.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a python function to count numbers whose oth and nth bits are set.\nassert count_Num(2) == 1\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.2, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.9}}, {"question": "\"\"\"\nWrite a python function to find the sum of fourth power of n natural numbers.\nassert fourth_Power_Sum(2) == 17\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 1.0, "meta-math/MetaMath-Mistral-7B": 1.0, "itpossible/Chinese-Mistral-7B-v0.1": 1.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.9, "meta-llama/Meta-Llama-3-8B": 1.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a function to perform the concatenation of two string tuples.\nassert concatenate_strings((\"Manjeet\", \"Nikhil\", \"Akshat\"), (\" Singh\", \" Meherwal\", \" Garg\")) == ('Manjeet Singh', 'Nikhil Meherwal', 'Akshat Garg')\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.9, "meta-math/MetaMath-Mistral-7B": 1.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.1, "HuggingFaceH4/zephyr-7b-beta": 0.5, "cognitivecomputations/dolphin-2.6-mistral-7b": 1.0, "meta-llama/Meta-Llama-3-8B": 1.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a function to convert radians to degrees.\nassert degree_radian(90)==5156.620156177409\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.2, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.1, "meta-llama/Meta-Llama-3-8B": 0.4, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a function to decode a run-length encoded given list.\nassert decode_list([[2, 1], 2, 3, [2, 4], 5,1])==[1,1,2,3,4,4,5,1]\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.3, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 1.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a function to check if a nested list is a subset of another nested list.\nassert check_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==False\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.8, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.5, "meta-llama/Meta-Llama-3-8B": 0.1, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a python function to find the first repeated character in a given string.\nassert first_Repeated_Char(\"Google\") == \"o\"\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a python function to find the minimum operations required to make two numbers equal.\nassert min_Operations(2,4) == 1\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a function to extract maximum and minimum k elements in the given tuple.\nassert extract_min_max((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a function to replace maximum n occurrences of spaces, commas, or dots with a colon.\nassert replace_max_specialchar('Python language, Programming language.',2)==('Python:language: Programming language.')\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.3, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a python function to find the first even number in a given list of numbers.\nassert first_even ([1, 3, 5, 7, 4, 1, 6, 8]) == 4\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 1.0, "meta-math/MetaMath-Mistral-7B": 1.0, "itpossible/Chinese-Mistral-7B-v0.1": 1.0, "HuggingFaceH4/zephyr-7b-beta": 0.8, "cognitivecomputations/dolphin-2.6-mistral-7b": 1.0, "meta-llama/Meta-Llama-3-8B": 1.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a function to check if all the elements in tuple have same data type or not.\nassert check_type((5, 6, 7, 3, 5, 6) ) == True\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 1.0, "meta-math/MetaMath-Mistral-7B": 1.0, "itpossible/Chinese-Mistral-7B-v0.1": 1.0, "HuggingFaceH4/zephyr-7b-beta": 1.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 1.0, "meta-llama/Meta-Llama-3-8B": 1.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a function to check for majority element in the given sorted array.\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.4, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.1, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a python function to count set bits of a given number.\nassert count_Set_Bits(2) == 1\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 1.0, "meta-math/MetaMath-Mistral-7B": 1.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.9, "HuggingFaceH4/zephyr-7b-beta": 1.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 1.0, "meta-llama/Meta-Llama-3-8B": 0.8, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a python function to find the minimum element in a sorted and rotated array.\nassert find_Min([1,2,3,4,5],0,4) == 1\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.6, "meta-math/MetaMath-Mistral-7B": 0.6, "itpossible/Chinese-Mistral-7B-v0.1": 0.7, "HuggingFaceH4/zephyr-7b-beta": 0.4, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.8, "meta-llama/Meta-Llama-3-8B": 0.6, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a python function to remove the characters which have odd index values of a given string.\nassert odd_values_string('abcdef') == 'ace'\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.6, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.7, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.1, "meta-llama/Meta-Llama-3-8B": 1.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a function to find minimum of three numbers.\nassert min_of_three(10,20,0)==0\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 1.0, "meta-math/MetaMath-Mistral-7B": 1.0, "itpossible/Chinese-Mistral-7B-v0.1": 1.0, "HuggingFaceH4/zephyr-7b-beta": 1.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 1.0, "meta-llama/Meta-Llama-3-8B": 1.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a python function to check whether all the bits are unset in the given range or not.\nassert all_Bits_Set_In_The_Given_Range(4,1,2) == True\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.7, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.1}}, {"question": "\"\"\"\nWrite a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.\nassert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.7, "meta-llama/Meta-Llama-3-8B": 0.2, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a function to replace blank spaces with any character in a string.\nassert replace_blank(\"hello people\",'@')==(\"hello@people\")\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.6, "meta-math/MetaMath-Mistral-7B": 0.9, "itpossible/Chinese-Mistral-7B-v0.1": 0.5, "HuggingFaceH4/zephyr-7b-beta": 1.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 1.0, "meta-llama/Meta-Llama-3-8B": 0.9, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a function to find the maximum sum in the given right triangle of numbers.\nassert max_sum([[1], [2,1], [3,3,2]], 3) == 6\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.1, "meta-math/MetaMath-Mistral-7B": 0.4, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.3, "meta-llama/Meta-Llama-3-8B": 0.2, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a function to get the n largest items from a dataset.\nassert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[100,90]\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.5, "meta-math/MetaMath-Mistral-7B": 0.9, "itpossible/Chinese-Mistral-7B-v0.1": 0.4, "HuggingFaceH4/zephyr-7b-beta": 1.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 1.0, "meta-llama/Meta-Llama-3-8B": 0.3, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.9}}, {"question": "\"\"\"\nWrite a function to find the lateral surface area of a cylinder.\nassert lateralsuface_cylinder(10,5)==314.15000000000003\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a function to find the volume of a cube.\nassert volume_cube(3)==27\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 1.0, "meta-math/MetaMath-Mistral-7B": 1.0, "itpossible/Chinese-Mistral-7B-v0.1": 1.0, "HuggingFaceH4/zephyr-7b-beta": 1.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 1.0, "meta-llama/Meta-Llama-3-8B": 1.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a python function to set all even bits of a given number.\nassert even_bit_set_number(10) == 10\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.\nassert No_of_Triangle(4,2) == 7\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a function to check the occurrences of records which occur similar times in the given tuples.\nassert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a python function to count number of non-empty substrings of a given string.\nassert number_of_substrings(\"abc\") == 6\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.9, "meta-math/MetaMath-Mistral-7B": 0.5, "itpossible/Chinese-Mistral-7B-v0.1": 0.8, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.8, "meta-llama/Meta-Llama-3-8B": 1.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.\nassert get_total_number_of_sequences(10, 4) == 4\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a function to replace the last element of the list with another list.\nassert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.7, "meta-math/MetaMath-Mistral-7B": 0.1, "itpossible/Chinese-Mistral-7B-v0.1": 0.8, "HuggingFaceH4/zephyr-7b-beta": 1.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.9, "meta-llama/Meta-Llama-3-8B": 0.2, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a function to generate a 3d array having each element as '*'.\nassert array_3d(6,4,3)==[[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']]]\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.4, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a function to count total characters in a string.\nassert count_charac(\"python programming\")==18\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 1.0, "meta-math/MetaMath-Mistral-7B": 1.0, "itpossible/Chinese-Mistral-7B-v0.1": 1.0, "HuggingFaceH4/zephyr-7b-beta": 1.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 1.0, "meta-llama/Meta-Llama-3-8B": 1.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a function to sort the given list based on the occurrence of first element of tuples.\nassert sort_on_occurence([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')]) == [(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)]\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a python function to find the next perfect square greater than a given number.\nassert next_Perfect_Square(35) == 36\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.3, "itpossible/Chinese-Mistral-7B-v0.1": 0.1, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 1.0, "meta-llama/Meta-Llama-3-8B": 0.6, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.6}}, {"question": "\"\"\"\nWrite a function to find the maximum sum of bi-tonic sub-sequence for the given array.\nassert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9) == 194\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a function for computing square roots using the babylonian method.\nassert babylonian_squareroot(10)==3.162277660168379\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.1, "meta-math/MetaMath-Mistral-7B": 1.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.5, "cognitivecomputations/dolphin-2.6-mistral-7b": 1.0, "meta-llama/Meta-Llama-3-8B": 0.1, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.6}}, {"question": "\"\"\"\nWrite a function to find the longest palindromic subsequence in the given string.\nassert lps(\"TENS FOR TENS\") == 5 \n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.9, "meta-math/MetaMath-Mistral-7B": 1.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.4, "meta-llama/Meta-Llama-3-8B": 0.8, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.9}}, {"question": "\"\"\"\nWrite a function to calculate the harmonic sum of n-1.\nassert harmonic_sum(7) == 2.5928571428571425\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.1, "meta-math/MetaMath-Mistral-7B": 0.1, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.1, "meta-llama/Meta-Llama-3-8B": 0.1, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a function to find the intersection of two arrays using lambda function.\nassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.3, "meta-math/MetaMath-Mistral-7B": 1.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.1, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.8, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a python function to count the occcurences of an element in a tuple.\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 1.0, "meta-math/MetaMath-Mistral-7B": 1.0, "itpossible/Chinese-Mistral-7B-v0.1": 1.0, "HuggingFaceH4/zephyr-7b-beta": 1.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 1.0, "meta-llama/Meta-Llama-3-8B": 1.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a function to insert an element before each element of a list.\nassert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black'] \n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.9, "meta-math/MetaMath-Mistral-7B": 1.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.2, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.5, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a python function to convert complex numbers to polar coordinates.\nassert convert(1) == (1.0, 0.0)\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 1.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.7, "HuggingFaceH4/zephyr-7b-beta": 1.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.3, "meta-llama/Meta-Llama-3-8B": 1.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a python function to count integers from a given list.\nassert count_integer([1,2,'abc',1.2]) == 2\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 1.0, "meta-math/MetaMath-Mistral-7B": 1.0, "itpossible/Chinese-Mistral-7B-v0.1": 1.0, "HuggingFaceH4/zephyr-7b-beta": 1.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 1.0, "meta-llama/Meta-Llama-3-8B": 1.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a function to find all words starting with 'a' or 'e' in a given string.\nassert words_ae(\"python programe\")==['ame']\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a python function to count the number of prime numbers less than a given non-negative number.\nassert count_Primes_nums(5) == 2\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.3, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.5, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 1.0, "meta-llama/Meta-Llama-3-8B": 0.5, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a function to swap two numbers.\nassert swap_numbers(10,20)==(20,10)\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 1.0, "meta-math/MetaMath-Mistral-7B": 1.0, "itpossible/Chinese-Mistral-7B-v0.1": 1.0, "HuggingFaceH4/zephyr-7b-beta": 1.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 1.0, "meta-llama/Meta-Llama-3-8B": 1.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a function to find number of odd elements in the given list using lambda function.\nassert count_odd([1, 2, 3, 5, 7, 8, 10])==4\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.9, "meta-math/MetaMath-Mistral-7B": 0.6, "itpossible/Chinese-Mistral-7B-v0.1": 1.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 1.0, "meta-llama/Meta-Llama-3-8B": 1.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.6}}, {"question": "\"\"\"\nWrite a function to maximize the given two tuples.\nassert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.1, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a function to find the nth newman\u2013shanks\u2013williams prime number.\nassert newman_prime(3) == 7 \n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a function to perform mathematical division operation across the given tuples.\nassert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.8, "itpossible/Chinese-Mistral-7B-v0.1": 0.8, "HuggingFaceH4/zephyr-7b-beta": 0.4, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.3, "meta-llama/Meta-Llama-3-8B": 0.9, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a function to split a given list into two parts where the length of the first part of the list is given.\nassert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 1.0, "meta-math/MetaMath-Mistral-7B": 1.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.7, "HuggingFaceH4/zephyr-7b-beta": 1.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 1.0, "meta-llama/Meta-Llama-3-8B": 0.9, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a function to merge two dictionaries.\nassert merge_dict({'a': 100, 'b': 200},{'x': 300, 'y': 200})=={'x': 300, 'y': 200, 'a': 100, 'b': 200}\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.5, "meta-math/MetaMath-Mistral-7B": 1.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.8, "HuggingFaceH4/zephyr-7b-beta": 1.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 1.0, "meta-llama/Meta-Llama-3-8B": 1.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a function to calculate a dog's age in dog's years.\nassert dog_age(12)==61\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.6, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a function to split a list for every nth element.\nassert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']] \n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.2, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a function to find the lateral surface area of a cube.\nassert lateralsurface_cube(5)==100\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.1, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 1.0, "meta-llama/Meta-Llama-3-8B": 1.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a python function to find the sum of squares of first n odd natural numbers.\nassert square_Sum(2) == 10\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.2, "meta-llama/Meta-Llama-3-8B": 0.8, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a function to find the n'th star number.\nassert find_star_num(3) == 37\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a function to find the ascii value of a character.\nassert ascii_value('A')==65\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 1.0, "meta-math/MetaMath-Mistral-7B": 1.0, "itpossible/Chinese-Mistral-7B-v0.1": 1.0, "HuggingFaceH4/zephyr-7b-beta": 1.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 1.0, "meta-llama/Meta-Llama-3-8B": 1.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a python function to find the sum of even numbers at even positions.\nassert sum_even_and_even_index([5, 6, 12, 1, 18, 8],6) == 30\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 1.0, "meta-math/MetaMath-Mistral-7B": 1.0, "itpossible/Chinese-Mistral-7B-v0.1": 1.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.9, "meta-llama/Meta-Llama-3-8B": 0.8, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.7}}, {"question": "\"\"\"\nWrite a python function to find the sum of fifth power of first n even natural numbers.\nassert even_Power_Sum(2) == 1056\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.2, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a function to perfom the rear element extraction from list of tuples records.\nassert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 1.0, "meta-math/MetaMath-Mistral-7B": 1.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.2, "HuggingFaceH4/zephyr-7b-beta": 1.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 1.0, "meta-llama/Meta-Llama-3-8B": 1.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a function to substract the contents of one tuple with corresponding index of other tuple.\nassert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.9, "itpossible/Chinese-Mistral-7B-v0.1": 0.7, "HuggingFaceH4/zephyr-7b-beta": 0.9, "cognitivecomputations/dolphin-2.6-mistral-7b": 1.0, "meta-llama/Meta-Llama-3-8B": 1.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.9}}, {"question": "\"\"\"\nWrite a python function to find sum of even index binomial coefficients.\nassert even_binomial_Coeff_Sum(4) == 8\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.1, "meta-math/MetaMath-Mistral-7B": 0.6, "itpossible/Chinese-Mistral-7B-v0.1": 0.3, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.3, "meta-llama/Meta-Llama-3-8B": 0.1, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a python function to find the position of the last removed element from the given array.\nassert get_Position([2,5,4],3,2) == 2\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a function to find the volume of a cylinder.\nassert volume_cylinder(10,5)==1570.7500000000002\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a function to filter a dictionary based on values.\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.6, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.4, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a function to find the element count that occurs before the record in the given tuple.\nassert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a function to find the nth decagonal number.\nassert is_num_decagonal(3) == 27\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a function to search an element in the given array by using sequential search.\nassert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 1.0, "meta-math/MetaMath-Mistral-7B": 1.0, "itpossible/Chinese-Mistral-7B-v0.1": 1.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 1.0, "meta-llama/Meta-Llama-3-8B": 1.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a python function to check if the elements of a given list are unique or not.\nassert all_unique([1,2,3]) == True\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.9, "meta-math/MetaMath-Mistral-7B": 0.5, "itpossible/Chinese-Mistral-7B-v0.1": 0.5, "HuggingFaceH4/zephyr-7b-beta": 0.9, "cognitivecomputations/dolphin-2.6-mistral-7b": 1.0, "meta-llama/Meta-Llama-3-8B": 1.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a function to substaract two lists using map and lambda function.\nassert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 1.0, "meta-math/MetaMath-Mistral-7B": 1.0, "itpossible/Chinese-Mistral-7B-v0.1": 1.0, "HuggingFaceH4/zephyr-7b-beta": 1.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 1.0, "meta-llama/Meta-Llama-3-8B": 1.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a python function to check whether the frequency of each digit is less than or equal to the digit itself.\nassert validate(1234) == True\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.4, "HuggingFaceH4/zephyr-7b-beta": 0.5, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.4, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.9}}, {"question": "\"\"\"\nWrite a function to check whether all items of a list are equal to a given string.\nassert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 1.0, "meta-math/MetaMath-Mistral-7B": 1.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.8, "HuggingFaceH4/zephyr-7b-beta": 1.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 1.0, "meta-llama/Meta-Llama-3-8B": 1.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a function that matches a string that has an a followed by two to three 'b'.\nassert text_match_two_three(\"ac\")==('Not matched!')\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.\nassert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a python function to find the sum of squares of first n even natural numbers.\nassert square_Sum(2) == 20\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.5, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a function to count array elements having modular inverse under given prime number p equal to itself.\nassert modular_inverse([ 1, 6, 4, 5 ], 4, 7) == 2\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.4, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a python function to calculate the number of odd days in a given year.\nassert odd_Days(100) == 5\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a function to find the list of lists with maximum length.\nassert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 1.0, "meta-math/MetaMath-Mistral-7B": 1.0, "itpossible/Chinese-Mistral-7B-v0.1": 1.0, "HuggingFaceH4/zephyr-7b-beta": 1.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 1.0, "meta-llama/Meta-Llama-3-8B": 1.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nassert count_no_of_ways(2, 4) == 16\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.1, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a python function to find quotient of two numbers.\nassert find(10,3) == 3\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.9, "meta-math/MetaMath-Mistral-7B": 1.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 1.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.8, "meta-llama/Meta-Llama-3-8B": 0.5, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a function to find the third side of a right angled triangle.\nassert otherside_rightangle(7,8)==10.63014581273465\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 1.0, "meta-math/MetaMath-Mistral-7B": 1.0, "itpossible/Chinese-Mistral-7B-v0.1": 1.0, "HuggingFaceH4/zephyr-7b-beta": 0.1, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.1, "meta-llama/Meta-Llama-3-8B": 1.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a function to find the maximum value in a given heterogeneous list.\nassert max_val(['Python', 3, 2, 4, 5, 'version'])==5\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.1, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.1}}, {"question": "\"\"\"\nWrite a function to return the sum of all divisors of a number.\nassert sum_div(8)==7\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.7, "meta-math/MetaMath-Mistral-7B": 0.1, "itpossible/Chinese-Mistral-7B-v0.1": 0.5, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.1, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a python function to count inversions in an array.\nassert get_Inv_Count([1,20,6,4,5],5) == 5\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 1.0, "meta-math/MetaMath-Mistral-7B": 1.0, "itpossible/Chinese-Mistral-7B-v0.1": 1.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 1.0, "meta-llama/Meta-Llama-3-8B": 1.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a function to flatten a given nested list structure.\nassert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 1.0, "meta-math/MetaMath-Mistral-7B": 1.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.4, "HuggingFaceH4/zephyr-7b-beta": 1.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 1.0, "meta-llama/Meta-Llama-3-8B": 1.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a function to find the nested list elements which are present in another list.\nassert intersection_nested_lists( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==[[12], [7, 11], [1, 5, 8]]\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a function to calculate the maximum aggregate from the list of tuples.\nassert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.2, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.4, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.2, "meta-llama/Meta-Llama-3-8B": 0.1, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\nassert count_binary_seq(1) == 2.0\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.1, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.1, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a function to find the depth of a dictionary.\nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.1, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.1, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a python function to find the most significant bit number which is also a set bit.\nassert set_Bit_Number(6) == 4\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.3, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a python function to check whether the count of inversion of two types are same or not.\nassert solve([1,0,2],3) == True\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a python function to find element at a given index after number of rotations.\nassert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a function to match two words from a list of words starting with letter 'p'.\nassert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.3}}, {"question": "\"\"\"\nWrite a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a function to get a colon of a tuple.\nassert colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True) \n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a function to find the specified number of largest products from two given lists.\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.1, "meta-math/MetaMath-Mistral-7B": 0.3, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.4, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a python function to find the maximum of two numbers.\nassert maximum(5,10) == 10\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 1.0, "meta-math/MetaMath-Mistral-7B": 1.0, "itpossible/Chinese-Mistral-7B-v0.1": 1.0, "HuggingFaceH4/zephyr-7b-beta": 1.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 1.0, "meta-llama/Meta-Llama-3-8B": 1.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a function to convert a given string to a tuple.\nassert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a python function to set the left most unset bit.\nassert set_left_most_unset_bit(10) == 14\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a function to find the volume of a cone.\nassert volume_cone(5,12)==314.15926535897927\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.1, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.1}}, {"question": "\"\"\"\nWrite a python function to print positive numbers in a list.\nassert pos_nos([-1,-2,1,2]) == 1,2\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.\nassert max_sum_rectangular_grid([ [1, 4, 5], [2, 0, 0 ] ], 3) == 7\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a python function to find the first maximum length of even word.\nassert find_Max_Len_Even(\"python language\") == \"language\"\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a function to find the index of the last occurrence of a given number in a sorted array.\nassert find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 3\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.7, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.6, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a function to reflect the modified run-length encoding from a list.\nassert modified_encode([1,1,2,3,4,4,5,1])==[[2, 1], 2, 3, [2, 4], 5, 1]\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.3, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a python function to find the maximum volume of a cuboid with given sum of sides.\nassert max_volume(8) == 18\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.9}}, {"question": "\"\"\"\nWrite a function to find all five characters long word in the given string by using regex.\nassert find_long_word('Please move back to strem') == ['strem']\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.6, "meta-math/MetaMath-Mistral-7B": 0.9, "itpossible/Chinese-Mistral-7B-v0.1": 0.2, "HuggingFaceH4/zephyr-7b-beta": 1.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 1.0, "meta-llama/Meta-Llama-3-8B": 1.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\nassert sum_difference(12)==5434\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.1, "meta-math/MetaMath-Mistral-7B": 0.3, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.7, "meta-llama/Meta-Llama-3-8B": 0.7, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.8}}, {"question": "\"\"\"\nWrite a function to find the demlo number for the given number.\nassert find_demlo(\"111111\") == '12345654321'\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a function to find all index positions of the minimum values in a given list.\nassert position_min([12,33,23,10,67,89,45,667,23,12,11,10,54])==[3,11]\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.7, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.5, "HuggingFaceH4/zephyr-7b-beta": 0.2, "cognitivecomputations/dolphin-2.6-mistral-7b": 1.0, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a function to re-arrange the given array in alternating positive and negative items.\nassert re_arrange([-5, -2, 5, 2, 4,\t7, 1, 8, 0, -8], 10) == [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a function to extract the sum of alternate chains of tuples.\nassert sum_of_alternates((5, 6, 3, 6, 10, 34)) == (46, 18)\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a python function to find the minimum number of squares whose sum is equal to a given number.\nassert get_Min_Squares(6) == 3\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.6, "meta-llama/Meta-Llama-3-8B": 0.1, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.4}}, {"question": "\"\"\"\nWrite a function to get the word with most number of occurrences in the given strings list.\nassert most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"] ) == 'UTS'\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.8, "meta-math/MetaMath-Mistral-7B": 1.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.6, "HuggingFaceH4/zephyr-7b-beta": 1.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 1.0, "meta-llama/Meta-Llama-3-8B": 0.8, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.6}}, {"question": "\"\"\"\nWrite a function to print check if the triangle is isosceles or not.\nassert check_isosceles(6,8,12)==False \n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 1.0, "meta-math/MetaMath-Mistral-7B": 1.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.9, "cognitivecomputations/dolphin-2.6-mistral-7b": 1.0, "meta-llama/Meta-Llama-3-8B": 1.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a function to rotate a given list by specified number of items to the left direction.\nassert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a python function to count negative numbers in a list.\nassert neg_count([-1,-2,3,-4,-5]) == 4\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 1.0, "meta-math/MetaMath-Mistral-7B": 1.0, "itpossible/Chinese-Mistral-7B-v0.1": 1.0, "HuggingFaceH4/zephyr-7b-beta": 1.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 1.0, "meta-llama/Meta-Llama-3-8B": 1.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a function to find all three, four, five characters long words in the given string by using regex.\nassert find_char('For the four consumer complaints contact manager AKR reddy') == ['For', 'the', 'four', 'AKR', 'reddy']\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 1.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.1, "HuggingFaceH4/zephyr-7b-beta": 0.6, "cognitivecomputations/dolphin-2.6-mistral-7b": 1.0, "meta-llama/Meta-Llama-3-8B": 1.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a python function to count unset bits of a given number.\nassert count_unset_bits(2) == 1\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.2, "meta-math/MetaMath-Mistral-7B": 0.6, "itpossible/Chinese-Mistral-7B-v0.1": 0.2, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.6, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.7}}, {"question": "\"\"\"\nWrite a function to count character frequency of a given string.\nassert char_frequency('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.7, "meta-math/MetaMath-Mistral-7B": 1.0, "itpossible/Chinese-Mistral-7B-v0.1": 1.0, "HuggingFaceH4/zephyr-7b-beta": 1.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 1.0, "meta-llama/Meta-Llama-3-8B": 1.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a python function to sort a list according to the second element in sublist.\nassert Sort([['a', 10], ['b', 5], ['c', 20], ['d', 15]]) == [['b', 5], ['a', 10], ['d', 15], ['c', 20]]\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.1, "meta-math/MetaMath-Mistral-7B": 0.8, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 1.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a python function to check whether the triangle is valid or not if sides are given.\nassert check_Validity(1,2,3) == False\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 1.0, "meta-math/MetaMath-Mistral-7B": 1.0, "itpossible/Chinese-Mistral-7B-v0.1": 1.0, "HuggingFaceH4/zephyr-7b-beta": 1.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 1.0, "meta-llama/Meta-Llama-3-8B": 1.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a function to find the sum of arithmetic progression.\nassert ap_sum(1,5,2)==25\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a function to check whether the given month name contains 28 days or not.\nassert check_monthnum(\"February\")==True\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 1.0, "meta-math/MetaMath-Mistral-7B": 1.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.5, "HuggingFaceH4/zephyr-7b-beta": 0.9, "cognitivecomputations/dolphin-2.6-mistral-7b": 1.0, "meta-llama/Meta-Llama-3-8B": 1.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a function that matches a word at the end of a string, with optional punctuation.\nassert text_match_word(\"python.\")==('Found a match!')\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.2, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a python function to count the number of substrings with same first and last characters.\nassert count_Substring_With_Equal_Ends('aba') == 4\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.6, "meta-math/MetaMath-Mistral-7B": 0.1, "itpossible/Chinese-Mistral-7B-v0.1": 0.8, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.5, "meta-llama/Meta-Llama-3-8B": 0.1, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a python function to find the maximum occuring divisor in an interval.\nassert find_Divisor(2,2) == 2\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a python function to find the sum of the three lowest positive numbers from a given list of numbers.\nassert sum_three_smallest_nums([10,20,30,40,50,60,7]) == 37\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.1, "HuggingFaceH4/zephyr-7b-beta": 0.6, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a function to convert the given set into ordered tuples.\nassert set_to_tuple({1, 2, 3, 4, 5}) == (1, 2, 3, 4, 5)\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.8, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 1.0, "HuggingFaceH4/zephyr-7b-beta": 1.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.5, "meta-llama/Meta-Llama-3-8B": 0.9, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a function to find the smallest range that includes at-least one element from each of the given arrays.\nassert find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]) == (4, 6)\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a function to calculate the number of digits and letters in a string.\nassert dig_let(\"python\")==(6,0)\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a python function to find number of elements with odd factors in a given range.\nassert count_Odd_Squares(5,100) == 8\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.1, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a function to find the difference between two consecutive numbers in a given list.\nassert diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])==[0, 2, 1, 0, 1, 1, 1]\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 1.0, "meta-math/MetaMath-Mistral-7B": 0.9, "itpossible/Chinese-Mistral-7B-v0.1": 0.9, "HuggingFaceH4/zephyr-7b-beta": 0.4, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.9, "meta-llama/Meta-Llama-3-8B": 0.3, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a function to find entringer number e(n, k).\nassert zigzag(4, 3) == 5\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a function to count sequences of given length having non-negative prefix sums that can be generated by given values.\nassert find_ways(4) == 2\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a python function to check whether the given string is a binary string or not.\nassert check(\"01010101010\") == \"Yes\"\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.6, "meta-math/MetaMath-Mistral-7B": 1.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.4, "HuggingFaceH4/zephyr-7b-beta": 1.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.3, "meta-llama/Meta-Llama-3-8B": 1.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.9}}, {"question": "\"\"\"\nWrite a python function to minimize the length of the string by removing occurrence of only one character.\nassert minimum_Length(\"mnm\") == 1\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.3, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a python function to find the first element occurring k times in a given array.\nassert first_Element([0,1,2,3,4,5],6,1) == 0\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a python function to check whether all the characters in a given string are unique.\nassert unique_Characters('aba') == False\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 1.0, "meta-math/MetaMath-Mistral-7B": 0.9, "itpossible/Chinese-Mistral-7B-v0.1": 0.7, "HuggingFaceH4/zephyr-7b-beta": 1.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 1.0, "meta-llama/Meta-Llama-3-8B": 1.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a function to remove a specified column from a given nested list.\nassert remove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[[2, 3], [4, 5], [1, 1]]\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.7, "meta-math/MetaMath-Mistral-7B": 1.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.4, "HuggingFaceH4/zephyr-7b-beta": 0.9, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.1, "meta-llama/Meta-Llama-3-8B": 0.2, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.3}}, {"question": "\"\"\"\nWrite a function to find t-nth term of arithemetic progression.\nassert tn_ap(1,5,2)==9\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a python function to count the number of rectangles in a circle of radius r.\nassert count_Rectangles(2) == 8\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a function to find the third angle of a triangle using two angles.\nassert find_angle(47,89)==44\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 1.0, "meta-math/MetaMath-Mistral-7B": 1.0, "itpossible/Chinese-Mistral-7B-v0.1": 1.0, "HuggingFaceH4/zephyr-7b-beta": 1.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 1.0, "meta-llama/Meta-Llama-3-8B": 1.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a function to find the maximum element of all the given tuple records.\nassert find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) == 10\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 1.0, "meta-math/MetaMath-Mistral-7B": 1.0, "itpossible/Chinese-Mistral-7B-v0.1": 1.0, "HuggingFaceH4/zephyr-7b-beta": 1.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 1.0, "meta-llama/Meta-Llama-3-8B": 1.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a function to find modulo division of two lists using map and lambda function.\nassert moddiv_list([4,5,6],[1, 2, 3])==[0, 1, 0]\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 1.0, "meta-math/MetaMath-Mistral-7B": 1.0, "itpossible/Chinese-Mistral-7B-v0.1": 1.0, "HuggingFaceH4/zephyr-7b-beta": 1.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 1.0, "meta-llama/Meta-Llama-3-8B": 1.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a python function to check whether one root of the quadratic equation is twice of the other or not.\nassert Check_Solution(1,3,2) == \"Yes\"\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.1, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.3, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.8}}, {"question": "\"\"\"\nWrite a function to find the n\u2019th carol number.\nassert get_carol(2) == 7\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a function to remove empty lists from a given list of lists.\nassert remove_empty([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []])==['Red', 'Green', [1, 2], 'Blue']\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 1.0, "meta-math/MetaMath-Mistral-7B": 1.0, "itpossible/Chinese-Mistral-7B-v0.1": 1.0, "HuggingFaceH4/zephyr-7b-beta": 1.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 1.0, "meta-llama/Meta-Llama-3-8B": 1.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.8}}, {"question": "\"\"\"\nWrite a python function to find the item with maximum occurrences in a given list.\nassert max_occurrences([1,2,3,1,2,3,12,4,2]) ==  2\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 1.0, "meta-math/MetaMath-Mistral-7B": 0.9, "itpossible/Chinese-Mistral-7B-v0.1": 0.7, "HuggingFaceH4/zephyr-7b-beta": 0.3, "cognitivecomputations/dolphin-2.6-mistral-7b": 1.0, "meta-llama/Meta-Llama-3-8B": 0.8, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a function to add the k elements to each element in the tuple.\nassert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.8, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.7, "HuggingFaceH4/zephyr-7b-beta": 0.6, "cognitivecomputations/dolphin-2.6-mistral-7b": 1.0, "meta-llama/Meta-Llama-3-8B": 0.5, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.6}}, {"question": "\"\"\"\nWrite a function to find the number of flips required to make the given binary string a sequence of alternate characters.\nassert min_flip_to_make_string_alternate(\"0001010111\") == 2\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a python function to count the number of digits of a given number.\nassert count_Digit(12345) == 5\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 1.0, "meta-math/MetaMath-Mistral-7B": 1.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.1, "HuggingFaceH4/zephyr-7b-beta": 1.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.9, "meta-llama/Meta-Llama-3-8B": 1.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a python function to find the largest product of the pair of adjacent elements from a given list of integers.\nassert adjacent_num_product([1,2,3,4,5,6]) == 30\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 1.0, "meta-math/MetaMath-Mistral-7B": 0.8, "itpossible/Chinese-Mistral-7B-v0.1": 1.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 1.0, "meta-llama/Meta-Llama-3-8B": 1.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a function to check if a binary tree is balanced or not.\nassert is_tree_balanced(root) == False\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a function to repeat the given tuple n times.\nassert repeat_tuples((1, 3), 4) == ((1, 3), (1, 3), (1, 3), (1, 3))\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.1, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.6, "cognitivecomputations/dolphin-2.6-mistral-7b": 1.0, "meta-llama/Meta-Llama-3-8B": 0.6, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a function to find the lateral surface area of cuboid\nassert lateralsurface_cuboid(8,5,6)==156\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a function to sort a tuple by its float element.\nassert float_sort([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')])==[('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')] \n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a function to find the smallest missing element in a sorted array.\nassert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.4, "itpossible/Chinese-Mistral-7B-v0.1": 0.1, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a function to sort a given list of elements in ascending order using heap queue algorithm.\nassert heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.4, "meta-math/MetaMath-Mistral-7B": 0.9, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.5, "meta-llama/Meta-Llama-3-8B": 1.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a function to find the volume of a cuboid.\nassert volume_cuboid(1,2,3)==6\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 1.0, "meta-math/MetaMath-Mistral-7B": 1.0, "itpossible/Chinese-Mistral-7B-v0.1": 1.0, "HuggingFaceH4/zephyr-7b-beta": 1.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 1.0, "meta-llama/Meta-Llama-3-8B": 1.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a function to print all permutations of a given string including duplicates.\nassert permute_string('ab')==['ab', 'ba']\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a function to round the given number to the nearest multiple of a specific number.\nassert round_num(4722,10)==4720\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 1.0, "meta-math/MetaMath-Mistral-7B": 0.4, "itpossible/Chinese-Mistral-7B-v0.1": 0.9, "HuggingFaceH4/zephyr-7b-beta": 0.1, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.2, "meta-llama/Meta-Llama-3-8B": 0.2, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.\nassert remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7)) == (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.7, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.5, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.9, "meta-llama/Meta-Llama-3-8B": 0.4, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.1}}, {"question": "\"\"\"\nWrite a python function to remove all occurrences of a character in a given string.\nassert remove_Char(\"aba\",'a') == \"b\"\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.9, "meta-math/MetaMath-Mistral-7B": 1.0, "itpossible/Chinese-Mistral-7B-v0.1": 1.0, "HuggingFaceH4/zephyr-7b-beta": 0.7, "cognitivecomputations/dolphin-2.6-mistral-7b": 1.0, "meta-llama/Meta-Llama-3-8B": 1.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a python function to shift last element to first position in the given list.\nassert move_first([1,2,3,4]) == [4,1,2,3]\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.6, "meta-math/MetaMath-Mistral-7B": 0.6, "itpossible/Chinese-Mistral-7B-v0.1": 0.9, "HuggingFaceH4/zephyr-7b-beta": 0.1, "cognitivecomputations/dolphin-2.6-mistral-7b": 1.0, "meta-llama/Meta-Llama-3-8B": 0.1, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a function to find the surface area of a cuboid.\nassert surfacearea_cuboid(1,2,3)==22\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 1.0, "meta-math/MetaMath-Mistral-7B": 1.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.5, "HuggingFaceH4/zephyr-7b-beta": 1.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 1.0, "meta-llama/Meta-Llama-3-8B": 1.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a function to generate a two-dimensional array.\nassert multi_list(3,4)==[[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]] \n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.9, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.5, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.5, "meta-llama/Meta-Llama-3-8B": 0.8, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.5}}, {"question": "\"\"\"\nWrite a function to sort a list of lists by a given index of the inner list.\nassert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==[('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 1.0, "meta-math/MetaMath-Mistral-7B": 1.0, "itpossible/Chinese-Mistral-7B-v0.1": 1.0, "HuggingFaceH4/zephyr-7b-beta": 0.5, "cognitivecomputations/dolphin-2.6-mistral-7b": 1.0, "meta-llama/Meta-Llama-3-8B": 1.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a function to find the number of rotations in a circularly sorted array.\nassert find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]) == 3\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.1, "itpossible/Chinese-Mistral-7B-v0.1": 0.3, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.8, "meta-llama/Meta-Llama-3-8B": 0.7, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.3}}, {"question": "\"\"\"\nWrite a python function to toggle all odd bits of a given number.\nassert even_bit_toggle_number(10) == 15\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.4, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a python function to find the frequency of the smallest value in a given array.\nassert frequency_Of_Smallest(5,[1,2,3,4,3]) == 1\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.9, "meta-math/MetaMath-Mistral-7B": 1.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.9, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 1.0, "meta-llama/Meta-Llama-3-8B": 0.6, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a function to find the n'th perrin number using recursion.\nassert get_perrin(9) == 12\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.7, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a function to find out the minimum no of swaps required for bracket balancing in the given string.\nassert swap_count(\"[]][][\") == 2\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a python function to check whether the hexadecimal number is even or odd.\nassert even_or_odd(\"AB3454D\") ==\"Odd\"\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.2, "meta-math/MetaMath-Mistral-7B": 0.1, "itpossible/Chinese-Mistral-7B-v0.1": 0.8, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 1.0, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a python function to find the highest power of 2 that is less than or equal to n.\nassert highest_Power_of_2(10) == 8\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.5, "HuggingFaceH4/zephyr-7b-beta": 0.8, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.9, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a function to find the n'th lucas number.\nassert find_lucas(9) == 76\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.9, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.8, "HuggingFaceH4/zephyr-7b-beta": 1.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 1.0, "meta-llama/Meta-Llama-3-8B": 1.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.1}}, {"question": "\"\"\"\nWrite a function to insert a given string at the beginning of all items in a list.\nassert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.3, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.7, "meta-llama/Meta-Llama-3-8B": 0.3, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a function to convert more than one list to nested dictionary.\nassert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.3, "meta-math/MetaMath-Mistral-7B": 1.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.2, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 1.0, "meta-llama/Meta-Llama-3-8B": 0.5, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.3}}, {"question": "\"\"\"\nWrite a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nassert get_max_sum(60) == 106\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.1, "meta-math/MetaMath-Mistral-7B": 0.1, "itpossible/Chinese-Mistral-7B-v0.1": 0.1, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.2, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a function to find the list with maximum length using lambda function.\nassert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a function to check if given tuple is distinct or not.\nassert check_distinct((1, 4, 5, 6, 1, 4)) == False\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.9, "meta-math/MetaMath-Mistral-7B": 0.1, "itpossible/Chinese-Mistral-7B-v0.1": 0.7, "HuggingFaceH4/zephyr-7b-beta": 0.5, "cognitivecomputations/dolphin-2.6-mistral-7b": 1.0, "meta-llama/Meta-Llama-3-8B": 0.9, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a python function to find the first non-repeated character in a given string.\nassert first_non_repeating_character(\"abcabc\") == None\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 1.0, "meta-math/MetaMath-Mistral-7B": 1.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.4, "HuggingFaceH4/zephyr-7b-beta": 1.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 1.0, "meta-llama/Meta-Llama-3-8B": 0.7, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a function to check whether the given string starts and ends with the same character or not using regex.\nassert check_char(\"abba\") == \"Valid\"\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.1, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.7}}, {"question": "\"\"\"\nWrite a function to find the median of three specific numbers.\nassert median_numbers(25,55,65)==55.0\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.5, "meta-math/MetaMath-Mistral-7B": 0.4, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 1.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.5, "meta-llama/Meta-Llama-3-8B": 0.2, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a function to compute the sum of digits of each number of a given list.\nassert sum_of_digits([10,2,56])==14\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a function to perform the mathematical bitwise xor operation across the given tuples.\nassert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.7, "meta-math/MetaMath-Mistral-7B": 1.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.9, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 1.0, "meta-llama/Meta-Llama-3-8B": 0.4, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a function to extract the frequency of unique tuples in the given list order irrespective.\nassert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.6, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\nassert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.1, "HuggingFaceH4/zephyr-7b-beta": 0.2, "cognitivecomputations/dolphin-2.6-mistral-7b": 1.0, "meta-llama/Meta-Llama-3-8B": 0.6, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a function to compute the value of ncr%p.\nassert ncr_modp(10,2,13)==6\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.4, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.1, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.1, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a function to check if a url is valid or not using regex.\nassert is_valid_URL(\"https://www.google.com\") == True\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.6, "meta-math/MetaMath-Mistral-7B": 1.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.8, "cognitivecomputations/dolphin-2.6-mistral-7b": 1.0, "meta-llama/Meta-Llama-3-8B": 0.4, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.9}}, {"question": "\"\"\"\nWrite a python function to find the minimum of two numbers.\nassert minimum(1,2) == 1\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 1.0, "meta-math/MetaMath-Mistral-7B": 1.0, "itpossible/Chinese-Mistral-7B-v0.1": 1.0, "HuggingFaceH4/zephyr-7b-beta": 1.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 1.0, "meta-llama/Meta-Llama-3-8B": 1.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a function to check whether an element exists within a tuple.\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.8, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 1.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.8, "meta-llama/Meta-Llama-3-8B": 0.8, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a python function to find the parity of a given number.\nassert find_Parity(12) == \"Even Parity\"\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 1.0, "meta-math/MetaMath-Mistral-7B": 1.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.4, "HuggingFaceH4/zephyr-7b-beta": 1.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 1.0, "meta-llama/Meta-Llama-3-8B": 0.8, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a function to create the next bigger number by rearranging the digits of a given number.\nassert rearrange_bigger(12)==21\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a function to find k number of pairs which consist of one element from the first array and one element from the second array.\nassert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.2, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.1}}, {"question": "\"\"\"\nWrite a function to find the minimum product from the pairs of tuples within a given list.\nassert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.1, "meta-math/MetaMath-Mistral-7B": 0.2, "itpossible/Chinese-Mistral-7B-v0.1": 0.5, "HuggingFaceH4/zephyr-7b-beta": 0.3, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.7, "meta-llama/Meta-Llama-3-8B": 0.7, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.1}}, {"question": "\"\"\"\nWrite a function to find the minimum value in a given heterogeneous list.\nassert min_val(['Python', 3, 2, 4, 5, 'version'])==2\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a function to convert the given snake case string to camel case string by using regex.\nassert snake_to_camel('android_tv') == 'AndroidTv'\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.1, "meta-math/MetaMath-Mistral-7B": 0.3, "itpossible/Chinese-Mistral-7B-v0.1": 0.5, "HuggingFaceH4/zephyr-7b-beta": 0.1, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.1, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a python function to remove odd numbers from a given list.\nassert remove_odd([1,2,3]) == [2]\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.9, "meta-math/MetaMath-Mistral-7B": 1.0, "itpossible/Chinese-Mistral-7B-v0.1": 1.0, "HuggingFaceH4/zephyr-7b-beta": 1.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 1.0, "meta-llama/Meta-Llama-3-8B": 1.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a function to extract the nth element from a given list of tuples.\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.9, "meta-math/MetaMath-Mistral-7B": 0.1, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 1.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 1.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a python function to check whether the value exists in a sequence or not.\nassert overlapping([1,2,3,4,5],[6,7,8,9]) == False\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 1.0, "meta-math/MetaMath-Mistral-7B": 1.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.8, "cognitivecomputations/dolphin-2.6-mistral-7b": 1.0, "meta-llama/Meta-Llama-3-8B": 1.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.9}}, {"question": "\"\"\"\nWrite a python function to find a pair with highest product from a given array of integers.\nassert max_Product([1,2,3,4,7,0,8,4]) == (7,8)\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.1, "meta-math/MetaMath-Mistral-7B": 0.1, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.\nassert breakSum(12) == 13\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a function to find common first element in given list of tuple.\nassert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a python function to find the sublist having maximum length.\nassert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.9, "meta-math/MetaMath-Mistral-7B": 1.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.6, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 1.0, "meta-llama/Meta-Llama-3-8B": 0.5, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nassert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 1.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.9, "HuggingFaceH4/zephyr-7b-beta": 0.6, "cognitivecomputations/dolphin-2.6-mistral-7b": 1.0, "meta-llama/Meta-Llama-3-8B": 0.8, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.9}}, {"question": "\"\"\"\nWrite a python function to find the cube sum of first n even natural numbers.\nassert cube_Sum(2) == 72\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a function to concatenate each element of tuple by the delimiter.\nassert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.2, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 1.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 1.0, "meta-llama/Meta-Llama-3-8B": 1.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a python function to find the average of cubes of first n natural numbers.\nassert find_Average_Of_Cube(2) == 4.5\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 1.0, "meta-math/MetaMath-Mistral-7B": 1.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.9, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 1.0, "meta-llama/Meta-Llama-3-8B": 1.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a function to solve gold mine problem.\nassert get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)==16\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a function to extract only the rear index element of each string in the given tuple.\nassert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 1.0, "meta-math/MetaMath-Mistral-7B": 1.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.9, "HuggingFaceH4/zephyr-7b-beta": 1.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 1.0, "meta-llama/Meta-Llama-3-8B": 0.9, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a function to count the number of sublists containing a particular element.\nassert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 1.0, "meta-math/MetaMath-Mistral-7B": 1.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.5, "HuggingFaceH4/zephyr-7b-beta": 1.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 1.0, "meta-llama/Meta-Llama-3-8B": 1.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a function to filter odd numbers using lambda function.\nassert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 1.0, "meta-math/MetaMath-Mistral-7B": 1.0, "itpossible/Chinese-Mistral-7B-v0.1": 1.0, "HuggingFaceH4/zephyr-7b-beta": 1.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 1.0, "meta-llama/Meta-Llama-3-8B": 0.8, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.\nassert change_date_format(\"2026-01-02\") == '02-01-2026'\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 1.0, "meta-math/MetaMath-Mistral-7B": 1.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.8, "HuggingFaceH4/zephyr-7b-beta": 0.8, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.9, "meta-llama/Meta-Llama-3-8B": 1.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.9}}, {"question": "\"\"\"\nWrite a function to sort the given array by using shell sort.\nassert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 1.0, "meta-math/MetaMath-Mistral-7B": 1.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.1, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 1.0, "meta-llama/Meta-Llama-3-8B": 1.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a function to extract the elementwise and tuples from the given two tuples.\nassert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.2, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.2, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.4, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a function to find the directrix of a parabola.\nassert parabola_directrix(5,3,2)==-198\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a function that takes two lists and returns true if they have at least one common element.\nassert common_element([1,2,3,4,5], [5,6,7,8,9])==True\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a function to find the median of a trapezium.\nassert median_trapezium(15,25,35)==20\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.1, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a function to check whether the entered number is greater than the elements of the given array.\nassert check_greater([1, 2, 3, 4, 5], 4) == 'No, entered number is less than those in the array'\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a function that matches a string that has an a followed by one or more b's.\nassert text_match_one(\"ac\")==('Not matched!')\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a python function to find the last digit of a given number.\nassert last_Digit(123) == 3\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 1.0, "meta-math/MetaMath-Mistral-7B": 1.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 1.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 1.0, "meta-llama/Meta-Llama-3-8B": 1.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a python function to print negative numbers in a list.\nassert neg_nos([-1,4,5,-6]) == -1,-6\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a function to remove odd characters in a string.\nassert remove_odd(\"python\")==(\"yhn\")\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a function to count bidirectional tuple pairs.\nassert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '3'\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a function to convert a list of multiple integers into a single integer.\nassert multiple_to_single([11, 33, 50])==113350\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 1.0, "meta-math/MetaMath-Mistral-7B": 0.7, "itpossible/Chinese-Mistral-7B-v0.1": 0.7, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 1.0, "meta-llama/Meta-Llama-3-8B": 1.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a function to find all adverbs and their positions in a given sentence.\nassert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a function to find the surface area of a cube.\nassert surfacearea_cube(5)==150\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 1.0, "meta-math/MetaMath-Mistral-7B": 1.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.9, "HuggingFaceH4/zephyr-7b-beta": 1.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 1.0, "meta-llama/Meta-Llama-3-8B": 1.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a function to find the ration of positive numbers in an array of integers.\nassert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a python function to find the largest negative number from the given list.\nassert largest_neg([1,2,3,-4,-6]) == -6\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.2, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.1, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a function to trim each tuple by k in the given tuple list.\nassert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a function to perform index wise multiplication of tuple elements in the given two tuples.\nassert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.2, "meta-math/MetaMath-Mistral-7B": 0.3, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 1.0, "meta-llama/Meta-Llama-3-8B": 0.6, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.9}}, {"question": "\"\"\"\nWrite a python function to count the occurence of all elements of list in a tuple.\nassert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.9, "meta-math/MetaMath-Mistral-7B": 0.9, "itpossible/Chinese-Mistral-7B-v0.1": 0.8, "HuggingFaceH4/zephyr-7b-beta": 0.8, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.3, "meta-llama/Meta-Llama-3-8B": 0.9, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a function to find cubes of individual elements in a list using lambda function.\nassert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 1.0, "meta-math/MetaMath-Mistral-7B": 1.0, "itpossible/Chinese-Mistral-7B-v0.1": 1.0, "HuggingFaceH4/zephyr-7b-beta": 1.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 1.0, "meta-llama/Meta-Llama-3-8B": 0.5, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a function to calculate the sum of perrin numbers.\nassert cal_sum(9) == 49\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a python function to check whether the triangle is valid or not if 3 points are given.\nassert check_Triangle(1,5,2,5,4,6) == 'Yes'\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.4, "meta-math/MetaMath-Mistral-7B": 0.1, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.6, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.1, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a function to extract specified size of strings from a give list of string values.\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.2, "meta-llama/Meta-Llama-3-8B": 1.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.3}}, {"question": "\"\"\"\nWrite a function to remove all whitespaces from the given string using regex.\nassert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.9, "meta-math/MetaMath-Mistral-7B": 1.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 1.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 1.0, "meta-llama/Meta-Llama-3-8B": 1.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a function that gives loss amount if the given amount has loss else return none.\nassert loss_amount(1500,1200)==None\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a python function to find the sum of even factors of a number.\nassert sumofFactors(18) == 26\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.1, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.1, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 1.0, "meta-llama/Meta-Llama-3-8B": 0.3, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a function that matches a word containing 'z'.\nassert text_match_wordz(\"pythonz.\")==('Found a match!')\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.1, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a function to check whether the given month number contains 31 days or not.\nassert check_monthnumb_number(5)==True\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 1.0, "meta-math/MetaMath-Mistral-7B": 1.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.7, "HuggingFaceH4/zephyr-7b-beta": 0.9, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.1, "meta-llama/Meta-Llama-3-8B": 0.8, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a function to reverse strings in a given list of string values.\nassert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 1.0, "meta-math/MetaMath-Mistral-7B": 1.0, "itpossible/Chinese-Mistral-7B-v0.1": 1.0, "HuggingFaceH4/zephyr-7b-beta": 1.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 1.0, "meta-llama/Meta-Llama-3-8B": 1.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a python function to find the sublist having minimum length.\nassert Find_Min([[1],[1,2],[1,2,3]]) == [1]\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.6, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.2, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.9, "meta-llama/Meta-Llama-3-8B": 0.8, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a function to find the area of a rectangle.\nassert rectangle_area(10,20)==200\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 1.0, "meta-math/MetaMath-Mistral-7B": 1.0, "itpossible/Chinese-Mistral-7B-v0.1": 1.0, "HuggingFaceH4/zephyr-7b-beta": 1.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 1.0, "meta-llama/Meta-Llama-3-8B": 1.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a function to remove uppercase substrings from a given string by using regex.\nassert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 1.0, "meta-math/MetaMath-Mistral-7B": 1.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.1, "HuggingFaceH4/zephyr-7b-beta": 1.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 1.0, "meta-llama/Meta-Llama-3-8B": 1.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a python function to get the first element of each sublist.\nassert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 1.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 1.0, "meta-llama/Meta-Llama-3-8B": 1.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a python function to count the upper case characters in a given string.\nassert upper_ctr('PYthon') == 1\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a function to find all possible combinations of the elements of a given list.\nassert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.1, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a function to find the maximum product subarray of the given array.\nassert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.2, "HuggingFaceH4/zephyr-7b-beta": 0.2, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.7}}, {"question": "\"\"\"\nWrite a function to check if all values are same in a dictionary.\nassert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.6, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.8, "HuggingFaceH4/zephyr-7b-beta": 1.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 1.0, "meta-llama/Meta-Llama-3-8B": 1.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a function to drop empty items from a given dictionary.\nassert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 1.0, "meta-math/MetaMath-Mistral-7B": 0.7, "itpossible/Chinese-Mistral-7B-v0.1": 1.0, "HuggingFaceH4/zephyr-7b-beta": 1.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 1.0, "meta-llama/Meta-Llama-3-8B": 0.5, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a function to find the peak element in the given array.\nassert find_peak([1, 3, 20, 4, 1, 0], 6) == 2\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.1, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.3, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.1, "meta-llama/Meta-Llama-3-8B": 0.6, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a python function to convert decimal number to octal number.\nassert decimal_to_Octal(10) == 12\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.5, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nassert max_product([3, 100, 4, 5, 150, 6], 6) == 45000 \n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a function to find the maximum profit earned from a maximum of k stock transactions\nassert max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3) == 10\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.7, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.6}}, {"question": "\"\"\"\nWrite a function to find the pairwise addition of the elements of the given tuples.\nassert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.8, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a python function to find remainder of array multiplication divided by n.\nassert find_remainder([ 100, 10, 5, 25, 35, 14 ],6,11) ==9\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.1, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.4, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a python function to check whether the given list contains consecutive numbers or not.\nassert check_Consecutive([1,2,3,4,5]) == True\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.8, "meta-math/MetaMath-Mistral-7B": 1.0, "itpossible/Chinese-Mistral-7B-v0.1": 1.0, "HuggingFaceH4/zephyr-7b-beta": 0.8, "cognitivecomputations/dolphin-2.6-mistral-7b": 1.0, "meta-llama/Meta-Llama-3-8B": 0.8, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\nassert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a function to replace characters in a string.\nassert replace_char(\"polygon\",'y','l')==(\"pollgon\")\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 1.0, "meta-math/MetaMath-Mistral-7B": 1.0, "itpossible/Chinese-Mistral-7B-v0.1": 1.0, "HuggingFaceH4/zephyr-7b-beta": 1.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 1.0, "meta-llama/Meta-Llama-3-8B": 1.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a function to sort counter by value.\nassert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 1.0, "meta-math/MetaMath-Mistral-7B": 1.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.1, "HuggingFaceH4/zephyr-7b-beta": 1.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.3, "meta-llama/Meta-Llama-3-8B": 1.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a python function to find the sum of the largest and smallest value in a given array.\nassert big_sum([1,2,3]) == 4\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.7, "meta-math/MetaMath-Mistral-7B": 1.0, "itpossible/Chinese-Mistral-7B-v0.1": 1.0, "HuggingFaceH4/zephyr-7b-beta": 1.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 1.0, "meta-llama/Meta-Llama-3-8B": 1.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a python function to convert the given string to lower case.\nassert is_lower(\"InValid\") == \"invalid\"\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 1.0, "meta-math/MetaMath-Mistral-7B": 1.0, "itpossible/Chinese-Mistral-7B-v0.1": 1.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 1.0, "meta-llama/Meta-Llama-3-8B": 1.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a function to remove lowercase substrings from a given string.\nassert remove_lowercase(\"PYTHon\")==('PYTH')\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 1.0, "meta-math/MetaMath-Mistral-7B": 1.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.5, "HuggingFaceH4/zephyr-7b-beta": 1.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 1.0, "meta-llama/Meta-Llama-3-8B": 0.9, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.9}}, {"question": "\"\"\"\nWrite a python function to find the first digit of a given number.\nassert first_Digit(123) == 1\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.2, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 1.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 1.0, "meta-llama/Meta-Llama-3-8B": 1.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a python function to find the maximum occurring character in a given string.\nassert get_max_occuring_char(\"data\") == \"a\"\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 1.0, "meta-math/MetaMath-Mistral-7B": 1.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.9, "HuggingFaceH4/zephyr-7b-beta": 1.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 1.0, "meta-llama/Meta-Llama-3-8B": 0.9, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a function to determine if there is a subset of the given set with sum equal to the given sum.\nassert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9) == True\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.1, "meta-math/MetaMath-Mistral-7B": 0.4, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\nassert match(\"Geeks\") == 'Yes'\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.1, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.1, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a python function to find the first natural number whose factorial is divisible by x.\nassert first_Factorial_Divisible_Number(10) == 5\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a function to remove the matching tuples from the given two tuples.\nassert remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('you', '?')]\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.6, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.6, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 1.0, "meta-llama/Meta-Llama-3-8B": 0.4, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.8}}, {"question": "\"\"\"\nWrite a function to find the largest palindromic number in the given array.\nassert largest_palindrome([1, 232, 54545, 999991], 4) == 54545\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.3, "meta-math/MetaMath-Mistral-7B": 0.1, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.4, "meta-llama/Meta-Llama-3-8B": 0.1, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a function to compute binomial probability for the given number.\nassert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 1.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.4, "meta-llama/Meta-Llama-3-8B": 1.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.8}}, {"question": "\"\"\"\nWrite a function to sort a list of tuples in increasing order by the last element in each tuple.\nassert sort_tuple([(1, 3), (3, 2), (2, 1)] ) == [(2, 1), (3, 2), (1, 3)]\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 1.0, "meta-math/MetaMath-Mistral-7B": 1.0, "itpossible/Chinese-Mistral-7B-v0.1": 1.0, "HuggingFaceH4/zephyr-7b-beta": 1.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 1.0, "meta-llama/Meta-Llama-3-8B": 1.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a function to find the area of a pentagon.\nassert area_pentagon(5)==43.01193501472417\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.3, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a python function to find the frequency of the largest value in a given array.\nassert frequency_Of_Largest(5,[1,2,3,4,4]) == 2\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 1.0, "meta-math/MetaMath-Mistral-7B": 1.0, "itpossible/Chinese-Mistral-7B-v0.1": 1.0, "HuggingFaceH4/zephyr-7b-beta": 1.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 1.0, "meta-llama/Meta-Llama-3-8B": 0.7, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a function to extract all the pairs which are symmetric in the given tuple list.\nassert extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] ) == {(8, 9), (6, 7)}\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.4, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a function to find the sum of geometric progression series.\nassert sum_gp(1,5,2)==31\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.2, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.2, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a function to search an element in the given array by using binary search.\nassert binary_search([1,2,3,5,8], 6) == False\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.6, "meta-math/MetaMath-Mistral-7B": 1.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.9, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 1.0, "meta-llama/Meta-Llama-3-8B": 0.7, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.\nassert calculate_polygons(1,1, 4, 4, 3)==[[(-5.0, -4.196152422706632), (-5.0, -0.7320508075688767), (-2.0, 1.0), (1.0, -0.7320508075688767), (1.0, -4.196152422706632), (-2.0, -5.928203230275509), (-5.0, -4.196152422706632)], [(1.0, -4.196152422706632), (1.0, -0.7320508075688767), (4.0, 1.0), (7.0, -0.7320508075688767), (7.0, -4.196152422706632), (4.0, -5.928203230275509), (1.0, -4.196152422706632)], [(7.0, -4.196152422706632), (7.0, -0.7320508075688767), (10.0, 1.0), (13.0, -0.7320508075688767), (13.0, -4.196152422706632), (10.0, -5.928203230275509), (7.0, -4.196152422706632)], [(-2.0, 1.0000000000000004), (-2.0, 4.464101615137755), (1.0, 6.196152422706632), (4.0, 4.464101615137755), (4.0, 1.0000000000000004), (1.0, -0.7320508075688767), (-2.0, 1.0000000000000004)], [(4.0, 1.0000000000000004), (4.0, 4.464101615137755), (7.0, 6.196152422706632), (10.0, 4.464101615137755), (10.0, 1.0000000000000004), (7.0, -0.7320508075688767), (4.0, 1.0000000000000004)], [(-5.0, 6.196152422706632), (-5.0, 9.660254037844387), (-2.0, 11.392304845413264), (1.0, 9.660254037844387), (1.0, 6.196152422706632), (-2.0, 4.464101615137755), (-5.0, 6.196152422706632)], [(1.0, 6.196152422706632), (1.0, 9.660254037844387), (4.0, 11.392304845413264), (7.0, 9.660254037844387), (7.0, 6.196152422706632), (4.0, 4.464101615137755), (1.0, 6.196152422706632)], [(7.0, 6.196152422706632), (7.0, 9.660254037844387), (10.0, 11.392304845413264), (13.0, 9.660254037844387), (13.0, 6.196152422706632), (10.0, 4.464101615137755), (7.0, 6.196152422706632)], [(-2.0, 11.392304845413264), (-2.0, 14.85640646055102), (1.0, 16.588457268119896), (4.0, 14.85640646055102), (4.0, 11.392304845413264), (1.0, 9.660254037844387), (-2.0, 11.392304845413264)], [(4.0, 11.392304845413264), (4.0, 14.85640646055102), (7.0, 16.588457268119896), (10.0, 14.85640646055102), (10.0, 11.392304845413264), (7.0, 9.660254037844387), (4.0, 11.392304845413264)]]\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a function to convert the given binary tuple to integer.\nassert binary_to_integer((1, 1, 0, 1, 0, 0, 1)) == '105'\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a function to remove lowercase substrings from a given string by using regex.\nassert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 1.0, "meta-math/MetaMath-Mistral-7B": 1.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.2, "HuggingFaceH4/zephyr-7b-beta": 0.8, "cognitivecomputations/dolphin-2.6-mistral-7b": 1.0, "meta-llama/Meta-Llama-3-8B": 1.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a function to find the smallest integers from a given list of numbers using heap queue algorithm.\nassert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],3)==[14, 22, 25] \n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.5, "meta-math/MetaMath-Mistral-7B": 0.7, "itpossible/Chinese-Mistral-7B-v0.1": 0.2, "HuggingFaceH4/zephyr-7b-beta": 0.6, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.8, "meta-llama/Meta-Llama-3-8B": 0.1, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a function to find the surface area of a cone.\nassert surfacearea_cone(5,12)==282.7433388230814\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.1, "meta-llama/Meta-Llama-3-8B": 0.9, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.1}}, {"question": "\"\"\"\nWrite a python function to find gcd of two positive integers.\nassert gcd(12, 17) == 1\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 1.0, "meta-math/MetaMath-Mistral-7B": 1.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.9, "HuggingFaceH4/zephyr-7b-beta": 1.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 1.0, "meta-llama/Meta-Llama-3-8B": 1.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a function to find the diameter of a circle.\nassert diameter_circle(10)==20\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 1.0, "meta-math/MetaMath-Mistral-7B": 1.0, "itpossible/Chinese-Mistral-7B-v0.1": 1.0, "HuggingFaceH4/zephyr-7b-beta": 1.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 1.0, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a function to concatenate all elements of the given list into a string.\nassert concatenate_elements(['hello','there','have','a','rocky','day'] ) == '  hello there have a rocky day'\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a python function to find common divisor between two numbers in a given pair.\nassert num_comm_div(2,4) == 2\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a python function to find remainder of two numbers.\nassert find(3,3) == 0\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 1.0, "meta-math/MetaMath-Mistral-7B": 1.0, "itpossible/Chinese-Mistral-7B-v0.1": 1.0, "HuggingFaceH4/zephyr-7b-beta": 1.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 1.0, "meta-llama/Meta-Llama-3-8B": 1.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a function to add consecutive numbers of a given list.\nassert add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[2, 4, 7, 8, 9, 11, 13]\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.6, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.8, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}, {"question": "\"\"\"\nWrite a python function to find the cube sum of first n natural numbers.\nassert sum_Of_Series(5) == 225\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 1.0, "meta-math/MetaMath-Mistral-7B": 1.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.4, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.9, "meta-llama/Meta-Llama-3-8B": 1.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a function to move all zeroes to the end of the given array.\nassert re_order([6, 0, 8, 2, 3, 0, 4, 0, 1]) == [6, 8, 2, 3, 4, 1, 0, 0, 0]\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 1.0, "meta-math/MetaMath-Mistral-7B": 0.6, "itpossible/Chinese-Mistral-7B-v0.1": 0.2, "HuggingFaceH4/zephyr-7b-beta": 0.1, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.9, "meta-llama/Meta-Llama-3-8B": 0.8, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a function to calculate the permutation coefficient of given p(n, k).\nassert permutation_coefficient(10, 2) == 90\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.5, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.5, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.1}}, {"question": "\"\"\"\nWrite a function to remove specific words from a given list.\nassert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['white', 'orange'])==['red', 'green', 'blue', 'black']\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 1.0, "meta-math/MetaMath-Mistral-7B": 1.0, "itpossible/Chinese-Mistral-7B-v0.1": 1.0, "HuggingFaceH4/zephyr-7b-beta": 1.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 1.0, "meta-llama/Meta-Llama-3-8B": 1.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a function to check if the common elements between two given lists are in the same order or not.\nassert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.1}}, {"question": "\"\"\"\nWrite a python function to find the average of odd numbers till a given odd number.\nassert average_Odd(9) == 5\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.6, "itpossible/Chinese-Mistral-7B-v0.1": 0.1, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.4, "meta-llama/Meta-Llama-3-8B": 0.2, "cognitivecomputations/dolphin-2.9-llama3-8b": 1.0}}, {"question": "\"\"\"\nWrite a function to find the number of subsequences having product smaller than k for the given non negative array.\nassert no_of_subsequences([1,2,3,4], 10) == 11\n\"\"\"\n", "scores": {"mistralai/Mistral-7B-v0.1": 0.0, "meta-math/MetaMath-Mistral-7B": 0.0, "itpossible/Chinese-Mistral-7B-v0.1": 0.0, "HuggingFaceH4/zephyr-7b-beta": 0.0, "cognitivecomputations/dolphin-2.6-mistral-7b": 0.0, "meta-llama/Meta-Llama-3-8B": 0.0, "cognitivecomputations/dolphin-2.9-llama3-8b": 0.0}}]